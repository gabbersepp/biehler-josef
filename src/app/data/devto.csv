[{"type_of":"article","id":411349,"title":"Read function arguments from .NET applications with .NET ProfilingAPI","description":"I show you how you can extend your profiler in order to read function parameters within a FunctionEnter event","published":true,"published_at":"2020-07-31T14:53:45.259Z","slug":"read-function-arguments-from-net-applications-with-net-profilingapi-c64","path":"/gabbersepp/read-function-arguments-from-net-applications-with-net-profilingapi-c64","url":"https://dev.to/gabbersepp/read-function-arguments-from-net-applications-with-net-profilingapi-c64","comments_count":1,"public_reactions_count":7,"page_views_count":660,"published_timestamp":"2020-07-31T14:53:45Z","body_markdown":"---\npublished: true\ntitle: \"Read function arguments from .NET applications with .NET ProfilingAPI\"\ndescription: \"I show you how you can extend your profiler in order to read function parameters within a FunctionEnter event\"\ntags: dotnet, cpp, csharp, tutorial\nseries: Net-Profiler\ncanonical_url:\n---\n\n>**Get the full runnable example:** [here](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/net-internals/profiler-fn-enter-arguments/code/DevToNetProfiler)\n\nToday I want to guide you through the process of getting function parameters and return values. As always I am using the code from the last blogpost and extend it where necessary. For this article we have to adjust `EnterCpp` and the part of assembler code that calls this function.\n\nWhile writing this lines I had no idea how this can be achieved. Of course I had the documentation about the [FunctionEnter2](https://docs.microsoft.com/de-de/dotnet/framework/unmanaged-api/profiling/functionenter2-function) callback and it's parameter `COR_PRF_FUNCTION_ARGUMENT_INFO *argumentInfo`. But how I had to use it was not described. I also found no example in the world wide web but luckily I found someone who tried the same and was asking for help in the official [dotnet repo](https://github.com/dotnet/docs/issues/6728). He doesn't get a complete working example but only a short explanation how he can get what he wants. This was enough for me to figure out the remaining stuff.\n\n# Modifying the Assembler code\nBefore we can start writing cool C++ code we must adjust the function signature of `EnterCpp`. When looking at the raw ICorProfiler definition of the enter callback, we can identify one additional argument that we should pass along with the `FunctionId`, named `argumentInfo`:\n\n```cpp\nvoid FnEnterCallback(FunctionID funcId, UINT_PTR clientData, COR_PRF_FRAME_INFO func, COR_PRF_FUNCTION_ARGUMENT_INFO argumentInfo)\n```\n\nSo let's change the signature of `EnterCpp`:\n\n```cpp\nvoid EnterCpp(FunctionID funcId, COR_PRF_FUNCTION_ARGUMENT_INFO * argumentInfo)\n```\n\nIn case of **64 bit** assembler `argumentInfo` is the fourth parameter from left and thus is located in the register `R9`. To make it available to `EnterCpp` just copy it to `RDX`: \n```\nMOV RDX, R9\n```\n\nIn case of **32 bit** assembler, we have to push the correct value from the stack:\n\n```\npush [ESP+20]\n```\n\nFeel free to take a look into the code to see the full assembler code.\n\n# Necessary steps if we know the types\n\nFor this first try I assume that we know the types of the parameter and I know that the functions will have only one parameter. Using those preconditions makes it easier to get a first runnable example. \n\nYou need these steps:\n+ Skip all functions whose name does not match our predefined set of functions\n+ get a pointer to the function parameter\n+ skip object header (if exists)\n+ process data according to it's type\n\nIn the end this is not too hard to build. But as always, I needed a lot of try&error to get it right.\n\n# Skip functions\n\nWell, this is easy. Just get the function name and compare it against our known function names. Utilize the `Utils` class for that:\n\n```cpp\nchar* fnName = new char[100];\nutils->GetFunctionNameById(funcId, fnName, 100);\n\nif (strcmp(fnName, \"FunctionWithParameter\") == 0) {\n    //... do something\n}\n```\n\n# Get Pointer to function arguments\nFrom what I have understand, the `argumentInfo` points to an struct that describes memory blocks with parameters. The reason for this is that parameters are not accessible in an continuous memory block but are split up for technical reasons. \n- `argumentInfo->numRanges` is the amount of such blocks\n- `argumentInfo->ranges` is an array of data\n\nAs we just have one parameter, this is not something we care about. So let's focus on `argumentInfo->ranges[0].startAddress`.\n\n```cpp\nCOR_PRF_FUNCTION_ARGUMENT_RANGE range = argumentInfo->ranges[0];\nUINT_PTR valuePtr = range.startAddress;\n```\n\nSo what is `valuePtr`? I haven't found a documentation about that but from what I have seen by debugging and testing, `valuePtr` is:\n+ **value type like 'int'**: a pointer to the value\n+ **object**: a pointer to the [Method Table pointer](https://devblogs.microsoft.com/premier-developer/managed-object-internals-part-1-layout/)\n+ **Struct:** a pointer to the struct\n\n# Skip object header\n[This article](https://devblogs.microsoft.com/premier-developer/managed-object-internals-part-1-layout/) states that an object points to the `Method Table Pointer` and not to the beginning of the object data. Right now we don't need the information contained in the header and thus can skip it. **Attention:** Take care of the correct pointer size on 32 bit systems vs 64 bit systems. Of course you don't have to care about it if the parameter's type is not of type `Object`.\n\n# Process data\nHow can we interpret the data? Well, this depends on the data type. This raises the question, how we know the internal representation of the data? There are at least two possibilities to get an answer to this question. One is to read books and articles from Microsoft or other people about that topic. Another approach, which is sufficient in many times, is to use a .NET project + Visual Studio + Debugger to inspect the memory.\n\nTo do this we first need some C# code:\n\n```cs\nstatic void Main(string[] args)\n{\n    IntArrayFn(new int[] { 1,2,3,4,5,6,7,8,9,10});\n}\n\nstatic void IntArrayFn(int[] intArray)\n{\n    // place a breakpoint here and leave the method empty\n}\n```\n\nNow execute the project as 64 bit application. This will produce function calls following the `fastcall` convention. That means that the parameters of `IntArrayFn` are passed from left to right in the registers `RCX, RDX, R8, R9`. This gives us the possibility to retrieve the memory address of the argument by inspecting the registers. Run the application and as soon as the breakpoint is hit, open **Debugging > Window > Register** to display the registers:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/profiler-fn-enter-arguments/assets/register.jpg)\n\nCopy the value from `RCX` *(000002015C922F40)* into **Debugging > Window > Memory**:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/profiler-fn-enter-arguments/assets/memory.jpg)\n\nThe first marked area is the pointer to the `Method Table`. The next 8 bytes represent the length of the array and after that you see the array elements with 4 bytes in size each.\n\n# Examples\nNow I show you some examples. In every example I am using this code in `EnterCpp`:\n\n```cpp\nextern \"C\" void _stdcall EnterCpp(\n  FunctionID funcId,\n  COR_PRF_FUNCTION_ARGUMENT_INFO * argumentInfo) {\n\n  char* fnName = new char[100];\n  utils->GetFunctionNameById(funcId, fnName, 100);\n```\n\nAnd this C# code in the test application:\n\n```cs\nusing System;\n\nnamespace TestApp\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      Console.ReadLine();\n\n      StructFn(new TestStruct { Int1 = 101, Int2 = 102, Int3 = 103 });\n      IntArrayFn(new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });\n      StringFn(\"Hello from C#\");\n      IntFn(1234);\n\n      Console.ReadLine();\n    }\n\n    static void IntArrayFn(int[] intArray)\n    {\n    }\n    static void StringFn(string str)\n    {\n    }\n\n    static void IntFn(int i1)\n    {\n    }\n\n    static void StructFn(TestStruct t)\n    {\n    }\n  }\n\n  struct TestStruct\n  {\n    public int Int1;\n    public int Int2;\n    public int Int3;\n  }\n}\n```\n\n## IntFn\nThis is very easy. An integer is a value type and as such I can access it directly:\n\n```cpp\nif (strcmp(fnName, \"IntFn\") == 0) {\n    COR_PRF_FUNCTION_ARGUMENT_RANGE range = argumentInfo->ranges[0];\n    UINT_PTR valuePtr = range.startAddress;\n    int* ptr = (int*)valuePtr;\n\n    std::cout << \"\\r\\n\\r\\n## Entered IntFn ##\\r\\n\";\n    std::cout << \"argument: \" << *ptr << \"\\r\\n\";\n    std::cout << \"## IntFn ends ##\";\n}\n```\n\n## StructFn\nA struct also is a value type and thus can be handled like an integer. All fields of the struct are in memory one after the other:\n\n```cpp\nif (strcmp(fnName, \"StructFn\") == 0) {\n    COR_PRF_FUNCTION_ARGUMENT_RANGE range = argumentInfo->ranges[0];\n    UINT_PTR valuePtr = range.startAddress;\n    int* ptr = (int*)valuePtr;\n    std::cout << \"\\r\\n\\r\\n## Entered StructFn() ##\\r\\n\";\n    std::cout << \"size of range: \" << range.length << \"\\r\\n\";\n    std::cout << \"arguments: Int1 = \" << *ptr << \", Int2 = \" << *(ptr + 1) << \", Int3 = \" << *(ptr + 2) << \"\\r\\n\";\n    std::cout << \"## StructFn() ends ##\";\n}\n``` \n\n`range.length` is **12**, because the struct consists of three fields where evry field needs four bytes.\n\n## IntArrayFn\nNow we see the handling of the object header.\n\n```cpp\nif (strcmp(fnName, \"IntArrayFn\") == 0) {\n    COR_PRF_FUNCTION_ARGUMENT_RANGE range = argumentInfo->ranges[0];\n    UINT_PTR valuePtr = range.startAddress;\n\n    int** ptr = (int**)valuePtr;\n    int* intArray = *ptr;\n\n    std::cout << \"\\r\\n\\r\\n## Enter IntArrayFn ##\\r\\n\";\n    intArray = intArray + sizeof(int*)/sizeof(int); //skip object header of array\n    long arrayLength = *(long*)intArray;\n    std::cout << \"Length: \" << arrayLength << \"\\r\\n\";\n    intArray += sizeof(int*) / sizeof(int);\n    std::cout << \"Arguments: \";\n\n    for (int i = 0; i < arrayLength; i++)\n    {\n      std:cout << \",\" << *intArray;\n      intArray += 1;\n    }\n\n    std::cout << \"\\r\\n## IntArrayFn ends ##\";\n}\n```\n\n`sizeof(int*)/sizeof(int)` is **2** in case of a 64 bit application and **1** for 32 bit applications. \n>**Remember**, raising a `int*` by one means to skip four bytes.\n\nAfter skipping the header and reading the size, we have access to all array elements.\n\n## StringFn\nA `string` is a little bit special because we have to convert it to print it to the console. I have copied a few lines of code for that task from a Stackoverflow article. Apart from this it is the same like in the integer array above:\n\n```cpp\nif (strcmp(fnName, \"StringFn\") == 0) {\n    COR_PRF_FUNCTION_ARGUMENT_RANGE range = argumentInfo->ranges[0];\n    UINT_PTR valuePtr = range.startAddress;\n\n    byte** ptr = (byte**)valuePtr;\n    byte* strPtr = *ptr;\n    strPtr = strPtr + sizeof(int*);\n    long stringLength = *(long*)strPtr;\n    strPtr += 4;\n    char* dest = new char[100];\n\n    std::wstring_convert<std::codecvt_utf8_utf16<char16_t>, char16_t> codecvt;\n    std::string u8str = codecvt.to_bytes((char16_t*)strPtr);\n\n    std::cout << \"\\r\\n\\r\\n## Entered StringFn ##\\r\\n\";\n    std::cout << \"Length: \" << stringLength << \"\\r\\n\";\n    std::cout << \"\\r\\argument: \" << u8str;\n    std::cout << \"\\r\\n## StringFn ends ##\";\n\n    delete[] dest;\n}\n```\n\n# Conclusion\nAs you can see, it is no big deal at all. I think I will try to get the values of unknown functions, too. This will be helpful in some debugging scenarios I think.\n\n# Additional Links\n[COR_PRF_FUNCTION_ARGUMENT_RANGE](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/cor-prf-function-argument-range-structure)\n[Theoretical usage of COR_PRF_FUNCTION_ARGUMENT_RANGE](https://github.com/dotnet/docs/issues/6728)\n[Memory Layout](https://devblogs.microsoft.com/premier-developer/managed-object-internals-part-1-layout/)\n[Layout of managed Arrays](https://windowsdebugging.wordpress.com/2012/04/07/memorylayoutofarrays/)\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":7,"cover_image":null,"tag_list":["dotnet","cpp","csharp","tutorial"],"canonical_url":"https://dev.to/gabbersepp/read-function-arguments-from-net-applications-with-net-profilingapi-c64","reading_time_minutes":7,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":397649,"title":"'function enter/leave' + .NET profiler + 64Bit. Assembler code included!","description":"This is the 64Bit v ersion of: Trace 'function enter/leave' events with a .NET profiler + detect StackOverflow. Assembler code included!","published":true,"published_at":"2020-07-14T18:34:48.327Z","slug":"function-enter-leave-net-profiler-64bit-assembler-code-included-3g20","path":"/gabbersepp/function-enter-leave-net-profiler-64bit-assembler-code-included-3g20","url":"https://dev.to/gabbersepp/function-enter-leave-net-profiler-64bit-assembler-code-included-3g20","comments_count":0,"public_reactions_count":5,"page_views_count":454,"published_timestamp":"2020-07-14T18:34:48Z","body_markdown":"---\npublished: true\ntitle: \"'function enter/leave' + .NET profiler + 64Bit. Assembler code included!\"\ndescription: \"This is the 64Bit v ersion of: Trace 'function enter/leave' events with a .NET profiler + detect StackOverflow. Assembler code included!\"\ntags: dotnet, cpp, asm, tutorial\nseries: Net-Profiler\ncanonical_url:\n---\n\n>**Note:** Get the full running example [here](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/net-internals/profiler-fn-enter-leave-x64/code/DevToNetProfiler)\n\nWhile beeing able to use inline assembler within a 32 bit project, you can not use that within a 64bit build. Microsoft just does not support this. You have to use an external `.asm` file instead which can be processed by `MASM` during the build process.\n\n# Assembler in VS\nTo activate `MASM` support in a `C++` project in `VS2019`, please follow the guidelines in the [official documentation](https://docs.microsoft.com/de-de/cpp/assembler/masm/masm-for-x64-ml64-exe?view=vs-2019). Additionally I suggest you to install the VS extension [AsmDude](https://marketplace.visualstudio.com/items?itemName=Henk-JanLebbink.AsmDude) to get syntax highlighting.\n\n# Switching between both implementations\nTo access the procedures that are defined in the assembler file, you must declare them with `extern \"C\"` in the header file. Otherwise the compiler rewrites the function names and thus the linker won't be able to match the CPP and ASM output together.\n\nTo see that effect, add a new function in a header file and call it somewhere in your CPP code. Then open the `obj` file and search the method name.\n\n```cpp\nextern bool DevToTest(int a, int b);\n```\n\nWithout the `\"C\"` addition, the name does not match the original one:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/profiler-fn-enter-leave-x64/assets/devtotest_extern.jpg)\n\nUsing `\"C\"` fixes this:\n\n```cpp\nextern \"C\" bool DevToTest(int a, int b);\n```\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/profiler-fn-enter-leave-x64/assets/devtotest_externc.jpg)\n\n\nTo differentiate between 32 and 64 bit code, you can use preprocessor directives. Adjust `Naked32Bit.h` as following:\n\n```cpp\n#pragma once\n#include \"pch.h\"\n\n#ifdef _WIN64\n\nEXTERN_C void InitEnterLeaveCallbacks(bool* activate, int* hashMap, int size);\n\nEXTERN_C void FnEnterCallback(FunctionID funcId,\n  UINT_PTR clientData,\n  COR_PRF_FRAME_INFO func,\n  COR_PRF_FUNCTION_ARGUMENT_INFO* argumentInfo);\n\nEXTERN_C void FnLeaveCallback(FunctionID funcId,\n  UINT_PTR clientData,\n  COR_PRF_FRAME_INFO func,\n  COR_PRF_FUNCTION_ARGUMENT_INFO* argumentInfo);\n\nEXTERN_C void FnTailcallCallback(FunctionID funcId,\n  UINT_PTR clientData,\n  COR_PRF_FRAME_INFO func);\n\n#else\n\nvoid InitEnterLeaveCallbacks(bool* activate, int* hashMap, int size);\n//....\n\n#endif\n```\n\nIn case of a 64 bit build, the functions refer to external symbols. I also adjusted the signature of the `Init` function. This was necessary because I wanted to show you how you can build the same logic as in the inline assembler. But this requires a hashmap. To avoid allocating memory in assembler, I just pass the variables from `CPP` into the assembler code. This saves me some time and makes the whole thing more readable. \n\n*Note*: Of course the naming of the header file is not correct anymore, but this does not matter :smile:\n\nNow adjust `Naked32bit.cpp`:\n\n```cpp\nextern \"C\" void _stdcall StackOverflowDetected(FunctionID funcId, int count) {\n  std::cout << \"stackoverflow: \" << funcId << \", count: \" << count;\n}\n\nextern \"C\" void _stdcall EnterCpp(\n  FunctionID funcId,\n  int identifier) {\n  std::cout << \"enter funcion id: \" << funcId << \", Arguments in correct order: \" << (identifier == 12345) << \"\\r\\n\";\n}\n\n#ifdef _WIN64\n\n#else\n\nbool* activateCallbacks;\nint* pHashMap;\nint mapSize;\n\nvoid InitEnterLeaveCallbacks(bool* activate, int* hashMap, int size) {\n  activateCallbacks = activate;\n  pHashMap = hashMap;\n  mapSize = size;\n}\n```\n\nBoth functions, `EnterCpp` and `SODetected` must be marked with `extern \"C\"`. The `Init` function and the variables must be moved into the 32bit code block. You can leave the 64bit code block empty because everything will be in the assembler file.\n\nNow add the initialize in `ProfilerCOncreteImpl.cpp`:\n\n```cpp\n  this->PHashMap = new int[mapSize];\n  memset(this->PHashMap, 0, mapSize);\n  InitEnterLeaveCallbacks(&this->ActivateCallbacks, this->PHashMap, mapSize);\n```\n\n# The ASM Code\nWhat you will see now is no magic. There is only one thing you have to pay attention for: In 64Bt builds there is only one calling convention: `fastcall`. See the links at the end of the post to get an insight into it. The most important points (at least these are the points I came across a few times):\n- parameters are passed from left to right in the register: `RCX, RDX, R8, R9`\n- The caller must reserve **4*8** bytes in case of the callee wants to store the parameters onto the stack\n- The caller has to clean up the stack afterwards\n\nI stumbled a few times over the last two points which led to unwanted behavior. \n\n```\n_DATA SEGMENT\n  pActivateEnterLeaveCallback qword 0\n  pHashMap qword 0\n  mapSize dword 0\n_DATA ENDS\n\nextern EnterCpp:proc\nextern StackOverflowDetected:proc\n\n_TEXT\tSEGMENT\n\nPUBLIC InitEnterLeaveCallbacks\n\nInitEnterLeaveCallbacks PROC\n  mov pActivateEnterLeaveCallback, RCX\n  mov pHashMap, RDX\n  mov mapSize, R8D\n  ret\nInitEnterLeaveCallbacks ENDP\n\nPUBLIC FnEnterCallback\n\nFnEnterCallback PROC\n  mov RAX, pActivateEnterLeaveCallback\n  cmp byte ptr [RAX], 1\n  JNE skipCallback\n\n  mov R8, pHashMap\n  MOV RAX, RCX\n  XOR RDX, RDX\n  DIV DWORD PTR [mapSize]\n  ADD R8, RDX\n  INC DWORD PTR [R8]\n  CMP DWORD PTR [R8], 30\n  JB skipStackOverflow\n\n  xor rdx, rdx\n  MOV EDX, [R8]\n  SUB RSP, 20h\n  CALL StackOverflowDetected\n  ADD RSP, 20h\n\n  skipStackOverflow:\n\n  sub RSP, 20h\n  mov rdx, 12345\n  CALL EnterCpp\n  add RSP, 20h\n\n  skipCallback:\n  ret\nFnEnterCallback ENDP\n\nPUBLIC FnLeaveCallback\n\nFnLeaveCallback PROC\n  MOV RAX, pActivateEnterLeaveCallback\n  CMP BYTE PTR [RAX], 1\n  JNE skipCallback\n\n  MOV R8, pHashMap\n  MOV RAX, RCX\n  XOR RDX, RDX\n  DIV DWORD PTR [mapSize]\n  ADD R8, RDX\n  DEC DWORD PTR [R8]\n\n  skipCallback:\n  ret\nFnLeaveCallback ENDP\n\nPUBLIC FnTailcallCallback\n\nFnTailcallCallback PROC\n  ret\nFnTailcallCallback ENDP\n\n_TEXT\tENDS\n\nEND\n```\n\nYou see, nothing new here. `sub RSP, 20h` and `add RSP, 20h` are used to reserve memory on the stack and clean it up afterwards.\n\n# Using CPP implementations\nAs it seems that the CLR uses `fastcall` convention for calling the callbacks, you may assume that you can use CPP implementations instead of writing assembler code. Indeed I was able to do this:\n\n```cpp\n#ifdef _WIN64\nbool* activateCallbacks;\nint* pHashMap;\nint mapSize;\n\n\nvoid InitEnterLeaveCallbacks(bool* activate, int* hashMap, int size) {\n  activateCallbacks = activate;\n  pHashMap = hashMap;\n  mapSize = size;\n}\n\nvoid __fastcall FnEnterCallback(\n  FunctionID funcId,\n  UINT_PTR clientData,\n  COR_PRF_FRAME_INFO func,\n  COR_PRF_FUNCTION_ARGUMENT_INFO* argumentInfo) {\n  if (activateCallbacks) {\n    int amount = pHashMap[funcId % mapSize];\n    amount++;\n    pHashMap[funcId % mapSize] = amount;\n\n    if (amount >= 30) {\n      StackOverflowDetected(funcId, amount);\n    }\n    EnterCpp(funcId, 12345);\n  }\n}\n\nvoid __fastcall FnLeaveCallback(\n  FunctionID funcId,\n  UINT_PTR clientData,\n  COR_PRF_FRAME_INFO func,\n  COR_PRF_FUNCTION_ARGUMENT_INFO* argumentInfo) {\n  if (activateCallbacks) {\n    pHashMap[funcId % mapSize] = pHashMap[funcId % mapSize] - 1;\n  }\n}\n\nvoid __fastcall FnTailcallCallback(FunctionID funcId,\n  UINT_PTR clientData,\n  COR_PRF_FRAME_INFO func) {\n}\n#else\n```\n\nDuring testing the code I don't see any errors but I don't know if this approach is intended by Microsoft.\n\n# Conclusion\nThe differences between 32 and 63 bit is not so big. I think the most relevant thing is the calling convention.\n\n# Additional Links\n[Configure project in VS to enable MASM](https://docs.microsoft.com/de-de/cpp/assembler/masm/masm-for-x64-ml64-exe?view=vs-2019)\n[Use correct #define for x86/x64](https://stackoverflow.com/a/8672915/9809950)\n[Impact of fastcall to stack consumption](https://www.viva64.com/en/b/0069/)\n[Unwind code macros](https://docs.microsoft.com/de-de/cpp/build/exception-handling-x64?view=vs-2019)\n[Stack usage on x64](https://docs.microsoft.com/de-de/cpp/build/stack-usage?view=vs-2019)\n[Another link about stack frames](https://www.tortall.net/projects/yasm/manual/html/objfmt-win64-exception.html)\n[X64 ASM code for the profiler](http://read.pudn.com/downloads64/sourcecode/windows/system/228104/leave_x64.asm__.htm)\n[Example about unwind information](https://docs.microsoft.com/de-de/cpp/assembler/masm/proc?view=vs-2019)\n[Explanation of fast call asm code](https://stackoverflow.com/questions/44269811/understanding-fastcall-stack-frame)\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. ","positive_reactions_count":5,"cover_image":null,"tag_list":["dotnet","cpp","asm","tutorial"],"canonical_url":"https://dev.to/gabbersepp/function-enter-leave-net-profiler-64bit-assembler-code-included-3g20","reading_time_minutes":5,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":354033,"title":"Trace 'function enter/leave' events with a .NET profiler + detect StackOverflow. Assembler code included!","description":"Trace 'function enter/leave' events with a .NET profiler + detect StackOverflow. Assembler code included!","published":true,"published_at":"2020-06-25T18:46:58.243Z","slug":"trace-function-enter-leave-events-with-a-net-profiler-detect-stackoverflow-assembler-code-included-466a","path":"/gabbersepp/trace-function-enter-leave-events-with-a-net-profiler-detect-stackoverflow-assembler-code-included-466a","url":"https://dev.to/gabbersepp/trace-function-enter-leave-events-with-a-net-profiler-detect-stackoverflow-assembler-code-included-466a","comments_count":0,"public_reactions_count":6,"page_views_count":786,"published_timestamp":"2020-06-25T18:46:58Z","body_markdown":"---\npublished: true\ntitle: \"Trace 'function enter/leave' events with a .NET profiler + detect StackOverflow. Assembler code included!\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/profiler-fn-enter-leave/assets/header.jpg\"\ndescription: \"Trace 'function enter/leave' events with a .NET profiler + detect StackOverflow. Assembler code included!\"\ntags: dotnet, cpp, asm, tutorial\nseries: Net-Profiler\ncanonical_url:\n---\n\n>**Note:** Get the full running example here: [Click me!](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/net-internals/profiler-fn-enter-leave/code/DevToNetProfiler)\n\nThe last time I showed some of the callbacks from `ICorProfilerCallback` and how you can obtain more information about the event. This time we want to take a look at the `Function Enter/Leave` callbacks.\n\n# Refactoring\nAs usual I took the project from the last post in this series. You may notice that I have changed the structure of the files. I moved all of the `virtual` dummy functions, that exists only because of the implementation of the `ICorProfilerCallback2` interface, into an own class. This helps us to keep an overview about what we really want to focus on. Also I made a small fix in the project settings to ensure that both, x32 and x64 builds, are put into the same output directory. This was made to keep the `start.bat` as simple as possible.\n\n# COR_PRF_MONITOR_ENTERLEAVE          \nToday we are looking at the `COR_PRF_MONITOR_ENTERLEAVE` option which makes it possible to get notified if a function is entered and left. The callbacks are not declared on the `ICorProfilerCallback` interface but must be [registered](https://docs.microsoft.com/de-de/dotnet/framework/unmanaged-api/profiling/icorprofilerinfo2-setenterleavefunctionhooks2-method) on the `ICorProfilerInfo` object. Use `ICorProfilerInfo.SetEnterLeaveFunctionHooks2` for this task. Please note that the call to this method must occur during `Initialize()`, otherwise it is not valid. Also the callbacks are a bit special in the way you have to implement them :smile:\n\n# Now Assembler comes into play\nIf we look into the documentation of [FunctionEnter2](https://docs.microsoft.com/de-de/dotnet/framework/unmanaged-api/profiling/functionenter2-function), we can read a inconspicuous paragraph that tells us that:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/profiler-fn-enter-leave/assets/fnenter2-paragraph.jpg)\n\n\"`naked`\" advices the compiler to neither insert function prologue nor the epilogue at machine code level. The `prologue` consists of a few lines of code that prepares the CPU registers and the stack for the use within the function while the `epilogue` is the counterpart that restores the stack and registers before the function is left. This means, we should write our callbacks using `inline assembler` code. For those who immediately think that under `x64` there is no `inline assembler`: Yes you are right. We will have a look at this in another blog post. In this I want to focus on 32 bit.\n\nWell, how should this assembler code look like? You can, of course, try it on your own. I took a look into the [official Microsoft example](https://github.com/Microsoft/clr-samples/blob/master/ProfilingAPI/ELTProfiler/CorProfiler.cpp#L27) to get a clue how this should work. For the sake of a better overview I put all the inline assembler code into an own file (named `naked32Bit.cpp`).\n\n# Base Assembler Code\nThe base code is very simple:\n\n```cpp\nvoid __declspec(naked) FnEnterCallback(\n  FunctionID funcId,\n  UINT_PTR clientData,\n  COR_PRF_FRAME_INFO func,\n  COR_PRF_FUNCTION_ARGUMENT_INFO* argumentInfo) {\n  __asm {\n    ret 16\n  }\n}\n\nvoid __declspec(naked) FnLeaveCallback(\n  FunctionID funcId,\n  UINT_PTR clientData,\n  COR_PRF_FRAME_INFO func,\n  COR_PRF_FUNCTION_ARGUMENT_INFO* argumentInfo) {\n  __asm {\n    ret 16\n  }\n}\n\nvoid __declspec(naked) FnTailcallCallback(FunctionID funcId,\n  UINT_PTR clientData,\n  COR_PRF_FRAME_INFO func) {\n  __asm {\n    ret 12\n  }\n}\n```\n\n>**Note:** The meaning of the parameter can be looked up in the documentation. The `TailCallCallback` is nothing I care about here because from what I have read this is not used (at least not very often).\n\nWhat is the sense of `ret 16`? Well, both callbacks get four arguments passed into by pushing them onto the stack. As already mentioned, there is no epilogue that is capable of removing them from the stack again. So it's on us to clear the stack. Four parameters where each has a size of four bytes results in 16 bytes that must be removed from the stack.\n\n## Accessing the callback's arguments\nWhen pushing function arguments onto the stack, the last parameter in the function definition gets pushed first. Calling the assembler command `CALL` results in another decrease of the stack pointer (SP) because the address of the opcode, that should be executed after the function, is pushed, too. This means that after arriving in the function, the SP must be raised by four bytes, to get the first parameter (was pushed directly before `CALL` occurred). To see this in action, we can create a small console application which writes the value in `input` into `output`:\n\n```cpp\n#include<iostream>\n\n__declspec(naked) void __stdcall Test(int input, int* output) {\n    __asm {\n        push EAX\n        push EBX\n        mov EAX, [ESP + 12] ;input\n        mov EBX, [ESP + 16] ;output\n        mov [EBX], EAX\n        pop EBX\n        pop EAX\n        ret 12\n    }\n}\n\nint main()\n{\n    int output = 0;\n    Test(100, &output);\n    std::cout << output;\n}\n```\n\nPlease note the **__stdcall**. This means that we clean up the stack on our own, exactly as we would do it in our callbacks. If you omitt this keyword, the compiler applies **cdecl** calling convention, which means that the caller cleans up the stack. `ret 16` would lead to a corrupt stack in this case.\n\nWhy do we need **[ESP + 12] to get the first argument**? Well, SP points to the next execution address. In the function we see two `push` commands, which decrease the SP by another 2*4 = 8 bytes. So in the end we have to increase SP by 12 bytes to get the first argument.\n\nBy the way: You also would be able to use the names of the function parameters:\n\n```cpp\n#include<iostream>\n\n__declspec(naked) void __stdcall Test(int input, int* output) {\n    __asm {\n        push EBP\n        mov EBP, ESP\n        push EAX\n        push EBX\n\n        mov EAX, input ; <--- variable name\n        mov EBX, output\n        mov [EBX], EAX\n\n        pop EBX\n        pop EAX\n        pop EBP\n        ret 8\n    }\n}\n\nint main()\n{\n    int output = 0;\n    Test(100, &output);\n    std::cout << output;\n}\n```\n\nThis is working because the compiler assumes where on the stack the arguments are:\n\n```asm\n_TEXT\tSEGMENT\n_input$ = 8\t\t\t\t\t\t; size = 4\n_output$ = 12\t\t\t\t\t\t; size = 4\n?Test@@YGXHPAH@Z PROC\t\t\t\t\t; Test, COMDAT\n; 4    :     __asm {\n; 5    :         push EBP\n  00000\t55\t\t push\t ebp\n; 6    :         mov EBP, ESP\n  00001\t8b ec\t\t mov\t ebp, esp\n; 7    :         push EAX\n  00003\t50\t\t push\t eax\n; 8    :         push EBX\n  00004\t53\t\t push\t ebx\n; 9    : \n; 10   :         mov EAX, input\n  00005\t8b 45 08\t mov\t eax, DWORD PTR _input$[ebp]\n```\n\nIn line 2 and 3 the position in the stack is defined. We see that \"`input`\" is accessible by [ESP:8]. I think the compiler assumes that we do a `PUSH EBP` and thus have to use the offset of **8** instead of **4**, but I haven't investigated more about this.\n\n## A very simple approach to reduce the ASM code to as few lines as possible\nIf you want to reduce the necessary amount of assembler code to a minimum, you can call a C++ function from assembler. Please pay attention which calling convention you choose. To see if all arguments are passed in the right order, I added a second parameter:\n\n```cpp\nvoid _stdcall EnterCpp(\n  FunctionID funcId,\n  int identifier) {\n  std::cout << \"enter funcion id: \" << funcId << \", Arguments in correct order: \" << (identifier == 12345) << \"\\r\\n\";\n}\n\nvoid __declspec(naked) FnEnterCallback(\n  FunctionID funcId,\n  UINT_PTR clientData,\n  COR_PRF_FRAME_INFO func,\n  COR_PRF_FUNCTION_ARGUMENT_INFO* argumentInfo) {\n  __asm {\n    ; push last parameter first!\n    push 12345\n    push [ESP+8]\n    call EnterCpp\n    ret 16\n  }\n}\n```\n\n## Use more ASM code\nI also want to show you an example that makes \"heavy\" use of Assembler code. Let's say you want to log function enter/leave only sometimes. As you must specify the callbacks during `Initialize()`, you can not completely deactivate the callbacks. So you might come up with the idea to use a flag that can be set from outside during the profiler session.\n\nFirst we have to introduce a flag. This code should be in the same file where the Assembler code is:\n\n```cpp\nbool* activateCallbacks;\n\nvoid InitEnterLeaveCallbacks(bool* activate) {\n  activateCallbacks = activate;\n}\n```\n\nThen call this function in the `Initialize()`:\n\n```cpp\nbool activateCallbacks = false;\n\nHRESULT __stdcall ProfilerConcreteImpl::Initialize(IUnknown* pICorProfilerInfoUnk)\n{\n  //...\n  InitEnterLeaveCallbacks(&activateCallbacks);\n  //...\n}\n```\n\nNow add some simple ASM code that compares the flag's content with `1` ( = true) and if the check fails, it skips the processing of the *function enter* callback:\n\n```cpp\nvoid __declspec(naked) FnEnterCallback(\n  FunctionID funcId,\n  UINT_PTR clientData,\n  COR_PRF_FRAME_INFO func,\n  COR_PRF_FUNCTION_ARGUMENT_INFO* argumentInfo) {\n  __asm {\n    push ebx\n    mov ebx, [activateCallbacks]\n    cmp byte ptr [ebx], 1\n    JNE skipCallback\n\n    ; push last parameter first!\n    push 12345\n    push [ESP+12]\n    call EnterCpp\n\n    skipCallback:\n    pop ebx\n    ret 16\n  }\n}\n```\n\n**:exclamation:Please note:exclamation:**: By using `EBX` to hold the flag's pointer, we have to increase ESP by another four bytes to get the `FunctionID` parameter.\n\n## Stackoverflow detection\nWhat else could we do with it? Well, in .NET Framework a `StackOverflowException` is the worst case scenario. The application will crash immediately, mostly with no crash dumps available. The enter/leave notifications gives us a possibility to detect a SO, at least it can tell us where one might happen. First we create a integer array which serves as some kind of **HashMap**. It maps a `FunctionID` to the amount of calls to this function:\n\n```cpp\nbool* activateCallbacks;\nint* hashMap;\nconst int mapSize = 10000;\n\nvoid InitEnterLeaveCallbacks(bool* activate) {\n  activateCallbacks = activate;\n  hashMap = new int[mapSize];\n  memset(hashMap, 0, mapSize);\n}\n```\n\nAs the real SO handling will be much more complex (maybe), I call a C++ function if a SO is detected:\n\n```cpp\nvoid _stdcall StackOverflowDetected(FunctionID funcId, int count) {\n  std::cout << \"stackoverflow: \" << funcId << \", count: \" << count;\n}\n```\n\nExtend the already existing code by checking the amount of calls:\n\n```cpp\nvoid __declspec(naked) FnEnterCallback(\n  FunctionID funcId,\n  UINT_PTR clientData,\n  COR_PRF_FRAME_INFO func,\n  COR_PRF_FUNCTION_ARGUMENT_INFO* argumentInfo) {\n  __asm {\n    push ebx\n    mov ebx, [activateCallbacks]\n    cmp byte ptr[ebx], 1\n    JNE skipCallback\n\n    ; check stackoverflow\n    mov ebx, [hashMap]\n    mov eax, [ESP + 8]\n    xor edx, edx\n    div dword ptr [mapSize]\n    add ebx, edx\n    inc dword ptr [ebx]\n    cmp dword ptr [ebx], 30\n    jb skipStackOverflow\n\n    push [ebx]\n    push [ESP + 12]\n    CALL StackOverflowDetected\n\n    skipStackOverflow:\n\n    ; push last parameter first!\n    push 12345\n    push [ESP+12]\n    call EnterCpp\n\n    skipCallback:    \n\n    pop ebx\n    ret 16\n  }\n}\n```\n\nThe code is not hard to understand, I think. By using a modulo operation we calculate the hash of the `FunctionID` and trace the depth of the call. But we also should decrease the amount of calls if the function returns:\n\n```cpp\nvoid __declspec(naked) FnLeaveCallback(\n  FunctionID funcId,\n  UINT_PTR clientData,\n  COR_PRF_FRAME_INFO func,\n  COR_PRF_FUNCTION_ARGUMENT_INFO* argumentInfo) {\n  __asm {\n    push ebx\n    mov ebx, [activateCallbacks]\n    cmp byte ptr[ebx], 1\n    JNE skipCallback\n\n    mov ebx, [hashMap]\n    mov eax, [ESP + 8]\n    xor edx, edx\n    div dword ptr [mapSize]\n    add ebx, edx\n    dec dword ptr [ebx]\n\n    skipCallback:\n\n    pop ebx\n    ret 16\n  }\n}\n```\n\n# Summary\nI showed you how you can use the Enter/Leave callbacks on a x86 platform. In the next article we are going to extend this to 64 bit. This differs a bit because there is no inline assembler support for 64 bit platforms. So stay tuned!\n\n# Additional Links\n[Official example about how to write Enter/Leave callbacks](https://github.com/Microsoft/clr-samples/blob/master/ProfilingAPI/ELTProfiler/CorProfiler.cpp#L27)\n[Another example for Enter/Leave](https://searchcode.com/codesearch/view/777153/)\n[Additional ASM Code from MS for X64](https://github.com/microsoftarchive/clrprofiler/blob/master/CLRProfiler/profilerOBJ/amd64/asmhelpers.asm)\n[Page 10: Which registers can be used](https://www.agner.org/optimize/calling_conventions.pdf)\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":6,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--G9BI8WrJ--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/profiler-fn-enter-leave/assets/header.jpg","tag_list":["dotnet","cpp","asm","tutorial"],"canonical_url":"https://dev.to/gabbersepp/trace-function-enter-leave-events-with-a-net-profiler-detect-stackoverflow-assembler-code-included-466a","reading_time_minutes":7,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":352645,"title":"Prevent routing if unsaved changes exist [VueJS]","description":"Apply a very small hack to prevent the user from accidentally switching to another page without saving changes [VueJS]","published":true,"published_at":"2020-06-10T16:24:51.585Z","slug":"prevent-routing-if-unsaved-changes-exist-vuejs-32om","path":"/gabbersepp/prevent-routing-if-unsaved-changes-exist-vuejs-32om","url":"https://dev.to/gabbersepp/prevent-routing-if-unsaved-changes-exist-vuejs-32om","comments_count":0,"public_reactions_count":6,"page_views_count":1099,"published_timestamp":"2020-06-10T16:24:51Z","body_markdown":"---\npublished: true\ntitle: \"Prevent routing if unsaved changes exist [VueJS]\"\ndescription: \"Apply a very small hack to prevent the user from accidentally switching to another page without saving changes [VueJS]\"\ntags: vue, javascript, webdev, beginners\nseries:\ncanonical_url:\n---\n\nLet's say you have a input field and routes configured:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/vuejs-avoid-routes/assets/form.jpg)\n\nHow can you avoid that the user navigates to a route if the inputfield contains unsaved text? I made a few tries to find a solution for that but did not found anything. So here is what I have done to solve this problem.\n\nFind the full runnable example here: [Click me!](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/vuejs-avoid-routes/code/example)\n\n# Solution\nFirst, define a new global function:\n\n```ts\nlet isRouteChangeBlocked: boolean = false;\n\nexport function blockRouteChange(set?: boolean): boolean {\n    if (arguments.length == 1) {\n        isRouteChangeBlocked = !!set;\n        return isRouteChangeBlocked;\n    }\n\n    return isRouteChangeBlocked;\n}\n\n```\n\nThen use it to set the flag after the user make some input:\n\n```ts\n  @Watch(\"input\")\n  private inputChange(to: string) {\n    if (to && to.length > 0) {\n      blockRouteChange(true);\n    } else {\n      blockRouteChange(false);\n    }\n  }\n```\n\nAfter a successful saving, reset the flag:\n\n```ts\n  private save() {\n    blockRouteChange(false);\n    alert(\"saved\");\n  }\n```\n\nNow replace the router's `push` function:\n\n```ts\nconst originalPush = VueRouter.prototype.push;\nVueRouter.prototype.push = function(location: RawLocation) {\n    if (blockRouteChange()) {\n        if (confirm(\"There are unsaved changes, do you want to continue?\")) {\n            blockRouteChange(false);\n            return originalPush.call(this, location) as any;\n        }\n        return;\n    }\n    return originalPush.call(this, location) as any;\n};\n```\n\n# Result\nHere is what I got:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/vuejs-avoid-routes/assets/vuejs-route1.gif)\n\n# Conclusion\nThis workaround works really well but I'm wondering whether there isn't a better possibility? Do you know how this can be achieved using a native solution? Maybe I just was not clever enough to type in the correct search terms into google :sweat_smile: Just let me know.\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":6,"cover_image":null,"tag_list":["vue","javascript","webdev","beginners"],"canonical_url":"https://dev.to/gabbersepp/prevent-routing-if-unsaved-changes-exist-vuejs-32om","reading_time_minutes":2,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":348868,"title":"Call function in unmanaged DLL from C# and pass custom data types [Marshal]","description":"This article shows how you can write a custom marshaler in order to call into unmanaged DLL's and pass custom data to the functions.","published":true,"published_at":"2020-06-06T15:19:50.794Z","slug":"call-function-in-unmanaged-dll-from-c-and-pass-custom-data-types-marshal-5c31","path":"/gabbersepp/call-function-in-unmanaged-dll-from-c-and-pass-custom-data-types-marshal-5c31","url":"https://dev.to/gabbersepp/call-function-in-unmanaged-dll-from-c-and-pass-custom-data-types-marshal-5c31","comments_count":0,"public_reactions_count":5,"page_views_count":8763,"published_timestamp":"2020-06-06T15:19:50Z","body_markdown":"---\npublished: true\ntitle: \"Call function in unmanaged DLL from C# and pass custom data types [Marshal]\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/marshal-example/assets/header.jpg\"\ndescription: \"This article shows how you can write a custom marshaler in order to call into unmanaged DLL's and pass custom data to the functions.\"\ntags: cpp, csharp, dotnet, tutorial\nseries:\ncanonical_url:\n---\n\n>**Note:** Get the full runnable example here: [Marshal example](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/net-internals/marshal-example/code)\n\nDuring my [last doings](https://dev.to/gabbersepp/win32-hooks-spy-how-i-got-rid-of-those-useless-mouse-buttons-using-windows-hooks-16el) I needed to call a unmanaged library from .NET. That mechanism is called [`Platform Invoke (P/Invoke)`](https://docs.microsoft.com/de-de/dotnet/standard/native-interop/pinvoke) can easily be done by using the `DllImport` attribute:\n\n```cs\n[DllImport(\"Dll1.dll\")]\npublic static extern void Test();\n```\n\nBut what if we want to pass some parameters? Let's say you have this C++ function definition:\n\n```cpp\nvoid __stdcall Test(intptr_t pointer)\n```\n\nWell, this one is easy:\n\n```cs\n[DllImport(\"Dll1.dll\")]\n public static extern void Test(IntPtr pointer);\n```\n\nNo work must be done by you to get this running. The transition from `IntPtr` to `intptr_t` is done by .NET using `Marshaling`. This is somehow like sending data to a web server. In the client code you have a `Date` object but the server expects a `DateTimeOffset`. The transisition is done by using e.g. JSON representation and a JSON serializer that is capable of converting a string into the `DateTimeOffset` structure. There are [many types](https://docs.microsoft.com/de-de/dotnet/standard/native-interop/type-marshaling) that can be marshaled out of the box.\n\n# Sending custom datatypes\nBut what can we do, if we have a `C++` signature like this:\n\n```cpp\nstruct TestFnParams {\n    int A;\n    char* B;\n};\n\nvoid __stdcall TestFunction(TestFnParams* p)\n```\n\nAnd a `C#` object like this:\n\n```cs\npublic class TestFnParams\n{\n    public int PropertyA { get; set; }\n    public string PropertyB { get; set; }\n}\n```\n\nFor this case .NET provides us with the capability to write an own `Marshaler`. In the following sections we are going to write a very simple one.\n\n## The C++ code\n\nWe just print both, the number and the string, that were passed in the struct. `TestFunction` expects a pointer to a `TestFnParams` struct:\n\n```cpp\n// ./code/DLL1/dllmain.cpp#L20-L29\n\nstruct TestFnParams {\n    int A;\n    char* B;\n};\n\nvoid __stdcall TestFunction(TestFnParams* p) {\n    std::cout << \"Number: \" << p->A << \"\\r\\n\";\n    std::cout << \"String: \" << p->B << \"\\r\\n\";\n    std::cout << \"Hello from dll\";\n}\n```\n\n## The C# code\nFirst we define the class:\n\n```cs\n// ./code/ConsoleApp1/Program.cs#L70-L74\n\npublic class TestFnParams\n{\n  public int PropertyA { get; set; }\n  public string PropertyB { get; set; }\n}\n```\n\nAnd the main function:\n\n```cs\n// ./code/ConsoleApp1/Program.cs#L58-L67\n\nstatic void Main(string[] args)\n{\n  var obj = new TestFnParams\n  {\n    PropertyA = 100,\n    PropertyB = \"Hello from managed object\"\n  };\n  TestFunction(obj);\n  Console.Read();\n}\n```\n\nNow specify the `DllImport` attribute with a small difference to the normal usage:\n\n```cs\n// ./code/ConsoleApp1/Program.cs#L55-L56\n\n[DllImport(\"Dll1.dll\", CallingConvention = CallingConvention.StdCall)]\npublic static extern void TestFunction([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler))] TestFnParams p);\n```\n\nBy using the `MarshalAs` attribute we can easily tell .NET to use our own marshaler.\n\n## Implementing the CustomMarshaler\nJust create a new class and implement `ICustomMarshaler`. It has following methods:\n\n+ **object MarshalNativeToManaged (IntPtr pNativeData)**\n\n  This method must be implemented if you are dealing with **return values of custom types** or **out parameters**. I don't use both so I skip it.\n\n+ **public IntPtr MarshalManagedToNative (object ManagedObj);**\n\n  Used to convert the method parameter into the native representation.\n\n+ **public int GetNativeDataSize ();**\n\n  From what I've understand, we can safely return `-1` here because `MarshalManagedToNative` returns a pointer that always have a fixed size. In my test this method was not called at all.\n\n+ **public void CleanUpNativeData (IntPtr pNativeData);**\n\n  Here we have to do the memory cleanup. Always remember, native data structures are unmanaged and thus you are responsible for the garbage collection.\n\n+ **public void CleanUpManagedData (object ManagedObj);**\n\n  The cleanup hook for the managed objects. In our simple case we don't need it.\n\nAlso there is [one constraint](https://docs.microsoft.com/de-de/dotnet/api/system.runtime.interopservices.icustommarshaler?view=netcore-3.1#implementing-the-getinstance-method) that must be fulfilled by the implementing class. It must provide a static method named `GetInstance`:\n\n```cs\nstatic ICustomMarshaler GetInstance(string pstrCookie);  \n```\n\nThe CLR is calling it in order to get an instance of the marshaler. This is necessary because the CLR will call that method once per application lifetime for every `pstrCookie`. So if you use the same function with different cookies, you can provide the CLR different instances. It is meant to be a singleton and thus should not hold any state.\n\n## Use different instances\nThe cookie can be specified within the `MarshalAs` attribute. Following code will call the same function but use another instance of the marshaler:\n\n```cs\n[DllImport(\"Dll1.dll\", CallingConvention = CallingConvention.StdCall, EntryPoint = \"TestFunction\")]\npublic static extern void TestFunctionOtherCookie([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler), MarshalCookie = \"OtherCookie\")]TestFnParams p);\n```\n\nUntil now, our implementation looks like this:\n\n```cs\npublic class CustomMarshaler : ICustomMarshaler\n{\n    void ICustomMarshaler.CleanUpManagedData(object ManagedObj)\n    {\n    }\n\n    void ICustomMarshaler.CleanUpNativeData(IntPtr pNativeData)\n    {\n        // to be defined\n    }\n\n    int ICustomMarshaler.GetNativeDataSize()\n    {\n        return -1;\n    }\n\n    IntPtr ICustomMarshaler.MarshalManagedToNative(object ManagedObj)\n    {\n        // to be defined\n    }\n\n    object ICustomMarshaler.MarshalNativeToManaged(IntPtr pNativeData)\n    {\n        throw new NotImplementedException();\n    }\n\n    public static ICustomMarshaler GetInstance(string cookie)\n    {\n        return new CustomMarshaler();\n    }\n}\n```\n\n## Implement MarshalManagedToNative\nFirst you have to know what kind of data the native function expects. In this case it is a pointer to a struct. How does the struct look like?\n\n```cpp\nstruct TestFnParams {\n    int A;\n    char* B;\n};\n```\n\nIn the memory you just have 8 bytes (in a 32bit process) somewherre in the memory where the first four bytes represent the integer `A` and the subsequent four bytes represent the pointer to the string `B`. To provide native data you have to allocate memory and write into it. Fortunatelly there is the `Marshal` class that provides a few functions to us:\n+ `AllocHGlobal(size)`: requests a memory block with the specified size in bytes\n+ `Write*`: functions to write into that memory block\n\nSo let's start by casting the function parameter:\n\n```cs\n// ./code/ConsoleApp1/Program.cs#L24-L30\n\nIntPtr ICustomMarshaler.MarshalManagedToNative(object ManagedObj)\n{\n  var casted = ManagedObj as TestFnParams;\n  if (casted == null)\n  {\n    return IntPtr.Zero;\n  }\n```\n\nNow we must use `AllocHGlobal`. But how many bytes do we need? Of course we need the mentioned *8* bytes to represent the struct. To support both, 32bit and 64 bit, use `sizeof`:\n```cs\nvar ptr = Marshal.AllocHGlobal(sizeof(int) + Marshal.SizeOf(typeof(IntPtr)));\n```\n\nThe next step is to write the integer `PropertyA` into that memory block:\n\n```cs\nMarshal.WriteInt32(ptr, casted.PropertyA);\n```\n\nTo write the string `PropertyB` into the native memory, following steps are required:\n+ allocate a memory block with the size: `PropertyB.Length + 1`. Mind the `+1` which is for holding the terminating `\\0` byte.\n+ write that pointer to `[ptr + 4]`\n+ write the char bytes to the newly allocated memory\n\nAnd this is the code:\n\n```cs\n// ./code/ConsoleApp1/Program.cs#L34-L39\n\nvar bytes = Encoding.UTF8.GetBytes(casted.PropertyB);\nvar strPtr = Marshal.AllocHGlobal(bytes.Length + 1);\nMarshal.Copy(bytes, 0, strPtr, bytes.Length);\nMarshal.WriteByte(strPtr + bytes.Length, 0);\nMarshal.WriteIntPtr(ptr + sizeof(int), strPtr);\nreturn ptr;\n```\n\nThat's all. You just marshaled a managed object successfully to a native function. The last step is to return the pointer to your manually created struct: `return ptr;`. This will be the function parameter which is received by the native function.\n\n# Conclusion\nI didn't expect this being so easy to implement (of course I don't have choosen the most complexe example here). The whole code (including reading documentation and troubleshooting) was written in under two hours if I remember correctly. One mistake that costs very much time was that I tried to copy the char bytes to `[ptr + 4]` what was completeley wrong of course:\n\n```cs\nvar ptr = Marshal.AllocHGlobal(sizeof(int) + casted.PropertyB.Length);\nMarshal.WriteInt32(ptr, casted.PropertyA);\nvar bytes = Encoding.UTF8.GetBytes(casted.PropertyB);\nMarshal.Copy(bytes, 0, ptr + 4, bytes.Length);\n```\n\n# Additional links\n\n[ICustomMarshaler](https://docs.microsoft.com/de-de/dotnet/api/system.runtime.interopservices.icustommarshaler)\n[Long Marshaler](https://limbioliong.wordpress.com/2013/11/23/example-custom-marshaler-the-long-marshaler/)\n[Understanding Custom Marshaling](https://limbioliong.wordpress.com/2013/11/03/understanding-custom-marshaling-part-1/)\n[More examples using marhsal cookie](https://limbioliong.wordpress.com/2013/11/19/custom-marshaling-comments-and-an-example-use-of-the-marshal-cookie/)\n[Types](https://docs.microsoft.com/de-de/dotnet/standard/native-interop/type-marshaling)\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":5,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--k8012mjJ--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/marshal-example/assets/header.jpg","tag_list":["cpp","csharp","dotnet","tutorial"],"canonical_url":"https://dev.to/gabbersepp/call-function-in-unmanaged-dll-from-c-and-pass-custom-data-types-marshal-5c31","reading_time_minutes":6,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":345661,"title":"[Win32 / Hooks / Spy++] How I got rid of those useless mouse buttons using Windows Hooks","description":"[Win32 / Hooks / Spy++] Blocking mouse buttons with Win32 Hooks, controlled by a little systray icon tool written in C#","published":true,"published_at":"2020-06-03T06:22:37.220Z","slug":"win32-hooks-spy-how-i-got-rid-of-those-useless-mouse-buttons-using-windows-hooks-16el","path":"/gabbersepp/win32-hooks-spy-how-i-got-rid-of-those-useless-mouse-buttons-using-windows-hooks-16el","url":"https://dev.to/gabbersepp/win32-hooks-spy-how-i-got-rid-of-those-useless-mouse-buttons-using-windows-hooks-16el","comments_count":0,"public_reactions_count":6,"page_views_count":2007,"published_timestamp":"2020-06-03T06:22:37Z","body_markdown":"---\npublished: true\ntitle: \"[Win32 / Hooks / Spy++] How I got rid of those useless mouse buttons using Windows Hooks\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/get-rid-of-mouse-buttons/assets/header.jpg\"\ndescription: \"[Win32 / Hooks / Spy++] Blocking mouse buttons with Win32 Hooks, controlled by a little systray icon tool written in C#\"\ntags: cpp, win32, csharp, windows\nseries:\ncanonical_url:\n---\n\n>**Note:** Get the code here: [Full runnable example](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/get-rid-of-mouse-buttons/code)\n\nA few months ago my computer mouse stopped working so I bought one of those cheap ones. It is working like a charm but unfortunately it has two very very annoying side buttons:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/get-rid-of-mouse-buttons/assets/photo.jpg)\n\nI don't remember ever using them. Most of the time they and me coexist peacefully but sometimes (often when my wife is in front of the computer) the get clicked accidentally. It is not a drama after all, you think? Well it is if you are sitting in front of your email provider's sending mask, typing a large text into it and accidentally click this strange side button that is mapped to the *back* button...\n\nSo I always wanted to get rid of them, but:\n\n+ Windows is not able to control those buttons\n+ the manufacturer does not provide a software for it\n+ removing the buttons from the mouse is not really a satisfactory solution for that problem\n\n# The very last solution\nToday I scanned my bookshelf and suddenly an old book, bought and read about 12 years ago, catches my eye:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/get-rid-of-mouse-buttons/assets/book.jpg)\n\nAfter reading the table of contents:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/get-rid-of-mouse-buttons/assets/toc.jpg)\n\nI saw the part with *Hooks*. And suddenly something I've done several years ago came back into my mind. Windows is based upon a [message system](https://docs.microsoft.com/en-us/windows/win32/winmsg/messages-and-message-queues) and there is a powerful function that let's you inspect every message. And in one case you are also able to modify the messages. So maybe you got my idea: Listen to a specific message and omit it so that the mouse click message never reaches any application.\n\n# Windows Message\nIf you press a key, someone sends somewhere a `WM_CHAR` message. If you press the left mouse button, a `WM_LBUTTONDOWN` is sent. Those events are fetched by applications that respond to them or skip them.\nE.g. having a WPF application with just a single button introduces a consumer of `WM_LBUTTOMDOWN` events and of course it also consumes the corresponding `WM_LBUTTONUP` events.\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/get-rid-of-mouse-buttons/assets/wpf-single-btn.jpg)\n\n# See windows messages in action\nIf you have `Visual Studio` installed, you have access to a little tool from Microsoft, called `Spy++`. You find it in the installation directory, e.g.:\n\n```\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\Common7\\Tools\n```\n\nThe folder contains two versions, a 32 Bit and a 64 Bit version. You must choose it based on the bitness of the application you want to inspect. The WPF application is executed as 32Bit application so I open that version. Click onto the button I've marked red in this screenshot. A new window appears:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/get-rid-of-mouse-buttons/assets/spypp-1.jpg)\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/get-rid-of-mouse-buttons/assets/spypp-2.jpg)\n\nNow click onto the crossfade, hold the button, move it over the application you are interested in and click the \"*OK*\" button. You are now tracing that application:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/get-rid-of-mouse-buttons/assets/spypp-4.jpg)\n\nYou see, there is a bunch of messages that were emitted all the time.\n\n# Determine the right message\nSo you know that there is a message if something happens on the keyboard or the mouse. How do you know what message we are interested in? Just trigger it and \"listen\" to the message stream. In this case I recommend to remember the last row number:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/get-rid-of-mouse-buttons/assets/spypp-5.jpg)\n\nThen place the mouse over the test app and press one of the side button. In my case the last message right before the click was: **1730** Right click onto the message stream and stop recording:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/get-rid-of-mouse-buttons/assets/spypp-6.jpg)\n\nYou now have a bunch of new messages. I wish you luck in finding the right one :smile: In my case I assumed that `WM_XBUTTONDOWN` is what I am looking for:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/get-rid-of-mouse-buttons/assets/spypp-7.jpg)\n\nOf course, just an assumption.\n\n# Hooking \nWe have to differentiate between a `local hook` and a `global hook`. As stated in [the official documentation](https://docs.microsoft.com/en-us/windows/win32/winmsg/about-hooks#hook-procedures) a global hook can monitor all events in all threads and must be placed into a own DLL.\n\nTo register a hook, we use [SetWindowsHookEx](https://docs.microsoft.com/de-de/windows/win32/api/winuser/nf-winuser-setwindowshookexa). It requires the `type of the hook` as first parameter. To get a full list of possible values, refer [to the official documentation](https://docs.microsoft.com/de-de/windows/win32/api/winuser/nf-winuser-setwindowshookexa?redirectedfrom=MSDN#parameters).\n\n# Blocking a message\nWe are interested in `WH_GETMESSAGE`. Whenever a windows application calls `GetMessage()` to retrieve the next message for dispatching (every application is doing this all the time :smile:), `WH_GETMESSAGE` is emitted. This is the only place where [you can modify the message](https://docs.microsoft.com/de-de/previous-versions/windows/desktop/legacy/ms644981(v=vs.85)#remarks). After returning from the hook callback, the message is passed to the application that calls `GetMessage()`. So whatever you write into the message will be visible to to the caller. This means, here we can adjust the message to prevent `WM_XBUTTONDOWN` being processed. To do so, replace the original message with `WM_NULL`.\n\n# Writing the start application\nMy intention is, to have a small application, staying in the `systray`, that provides three functions:\n+ Enable Buttons\n+ Disable Buttons\n+ Close App\n\n## Calling unmanaged code from C#\nAs already mentioned, we need a DLL to make this happen. I am writing the DLL in C++ and thus we need to call unmanaged code from our managed application. Fortunately C#/.NET makes it easy for us to do so! Let's say there exist two methods: `SetHook` and `RemoveHook` (with `std calling convention`) and the DLL will be named *DLL1.dll*, then you simple have to put those two `DllImport` statements at the root of the application's class:\n\n```cs\n[DllImport(\"Dll1.dll\", CallingConvention = CallingConvention.StdCall)]\npublic static extern void SetHook();\n\n[DllImport(\"Dll1.dll\", CallingConvention = CallingConvention.StdCall)] \npublic static extern void RemoveHook();\n```\n\nVery easy! \n\n## Systray Icon\nThere is nothing special about the code. I used a WinForms application type because there it is much easier to setup a systray icon than with a WPF application.\n\n```cs\n// ./code/App/Program.cs\n\n﻿using System;\nusing System.Drawing;\nusing System.Runtime.InteropServices;\nusing System.Windows.Forms;\n\nnamespace App\n{\n    static class Program\n    {\n        private static NotifyIcon notifyIcon;\n\n        [DllImport(\"Dll1.dll\", CallingConvention = CallingConvention.StdCall)]\n        public static extern void SetHook();\n    \n        [DllImport(\"Dll1.dll\", CallingConvention = CallingConvention.StdCall)] \n        public static extern void RemoveHook();\n\n        private static void SetText(bool? disabled = null)\n        {\n            notifyIcon.Text = \"Disable XButton App\";\n\n            if (disabled == true)\n            {\n                notifyIcon.Text += \" [Disabled]\";\n            } \n            else if (disabled == false)\n            {\n                notifyIcon.Text += \" [Enabled]\";\n            }\n        }\n\n        private static void InitIcon()\n        {\n            notifyIcon = new NotifyIcon();\n            notifyIcon.Icon = new Icon(\"example.ico\");\n            SetText();\n            notifyIcon.Visible = true;\n            notifyIcon.ContextMenuStrip = GetContextMenu();\n        }\n\n        private static ContextMenuStrip GetContextMenu()\n        {\n            var cm = new ContextMenuStrip();\n            var item = new ToolStripMenuItem();\n            item.Text = \"Disable buttons\";\n            item.Click += DisableClick;\n            cm.Items.Add(item);\n            \n            item = new ToolStripMenuItem();\n            item.Text = \"Enable buttons\";\n            item.Click += EnableClick;\n            cm.Items.Add(item);\n            cm.Items.Add(new ToolStripSeparator());\n\n            item = new ToolStripMenuItem();\n            item.Text = \"Close\";\n            item.Click += CloseClick;\n            cm.Items.Add(item);\n\n            return cm;\n        }\n\n        private static void CloseClick(object sender, EventArgs e)\n        {\n            Application.Exit();\n        }\n\n        private static void EnableClick(object sender, EventArgs e)\n        {\n            SetText(false);\n            RemoveHook();\n        }\n\n        private static void DisableClick(object sender, EventArgs e)\n        {\n            SetText(true);\n            SetHook();\n        }\n\n        [STAThread]\n        static void Main()\n        {\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            InitIcon();\n            Application.Run();\n            notifyIcon.Dispose();\n        }\n    }\n}\n\n```\n\nResult:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/get-rid-of-mouse-buttons/assets/systray.jpg)\n\n# Writing the DLL\nI just created a new `DLL project` in `Visual Studio` and deleted everything I don't need. This is what was left:\n\n```cpp\n// ./code/Dll1/dllmain.cpp#L1-L16\n\n#include \"pch.h\"\n\nHHOOK hkKey = NULL;\nHINSTANCE hInstHookDll = NULL;\nLRESULT CALLBACK GetMsgProc(int code, WPARAM wParam, LPARAM lParam);\n\nBOOL APIENTRY DllMain(HANDLE hModule, DWORD  reasonForCall, LPVOID lpReserved)\n{\n    switch (reasonForCall)\n    {\n    case DLL_PROCESS_ATTACH:\n        hInstHookDll = (HINSTANCE)hModule;\n        break;\n    }\n    return TRUE;\n}\n```\n\nThen we need a function that can set the hook:\n\n```cpp\n// ./code/DLL1/dllmain.cpp#L18-L21\n\nvoid __stdcall SetHook()\n{\n    if (hkKey == NULL)\n        hkKey = SetWindowsHookEx(WH_GETMESSAGE, GetMsgProc, hInstHookDll, 0);\n```\n\nAnd one that can remove the hook:\n\n```cpp\n// ./code/DLL1/dllmain.cpp#L24-L29\n\nvoid __stdcall RemoveHook()\n{\n    if (hkKey != NULL)\n        UnhookWindowsHookEx(hkKey);\n    hkKey = NULL;\n}\n```\n\nThe main part surely is the hook callback:\n\n```cpp\n// ./code/DLL1/dllmain.cpp#L31-L41\n\nLRESULT CALLBACK GetMsgProc(int code, WPARAM wParam, LPARAM lParam)\n{\n    if (code >= 0 && code == HC_ACTION)\n    {\n        MSG* msg = (MSG*)lParam;\n        if (msg->message == WM_XBUTTONDOWN || msg->message == WM_XBUTTONUP) {\n            msg->message = WM_NULL;\n        }\n    }\n    return CallNextHookEx(hkKey, code, wParam, lParam);\n}\n```\n\nWhat happens in this few line of code:\n+ `int code`: according to the [Microsoft documentation](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms644981(v=vs.85)#parameters) we can forward this call to the next hook if `code <> HC_ACTION`\n+ `lParam` contains a pointer to a `MSG` struct\n+ if the message is equal to `WM_XBUTTONDOWN` or `WM_BUTTONUP` replace the message with `WM_NULL` \n\n# 32 Bit vs. 64 Bit\nThe hook DLL is injected into every process. The hook code is executed within the context of the hooked application. This means that using a 32 Bit DLL will block the XButtons in 32Bit applications but not in 64Bit applications. If you want to block the buttons in all applications, you must create a 32Bit and a 64Bit DLL.\n\n# Troubleshooting\nIf you are not able to call `SetHook`and `RemoveHook` you should check if you exported the functions correctly. To do this, open the `Developer Command Prompt for VS`, change the working directory to the folder where your DLL was filed and execute:\n```\ndumpbin /exports dll1.dll\n```\n\nThe result should look similar to this:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/get-rid-of-mouse-buttons/assets/dumpbin.jpg)\n\n# Summary\nI showed you how you can block mouse buttons using only a few lines of code. This approach can be extended to many other use cases, too.\n\n# Additional Links\n[System-Wide-Hooking-for-the-WM-CHAR-Message](https://www.codeproject.com/Articles/50397/System-Wide-Hooking-for-the-WM-CHAR-Message)\n[Hook on Mouse with Win32 api](https://causeyourestuck.io/2015/12/27/set-a-mouse-hook-with-win32api-2/)\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":6,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--A5lmSQcl--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/get-rid-of-mouse-buttons/assets/header.jpg","tag_list":["cpp","win32","csharp","windows"],"canonical_url":"https://dev.to/gabbersepp/win32-hooks-spy-how-i-got-rid-of-those-useless-mouse-buttons-using-windows-hooks-16el","reading_time_minutes":8,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":343642,"title":"Controlling the file chooser within a Cypress.io test","description":"You were told that you can not control the 'open file' dialog in Cypress? I can tell you, that you were fooled!","published":true,"published_at":"2020-05-25T21:04:55.590Z","slug":"controlling-the-file-chooser-within-a-cypress-io-test-4ogi","path":"/gabbersepp/controlling-the-file-chooser-within-a-cypress-io-test-4ogi","url":"https://dev.to/gabbersepp/controlling-the-file-chooser-within-a-cypress-io-test-4ogi","comments_count":0,"public_reactions_count":6,"page_views_count":1994,"published_timestamp":"2020-05-25T21:04:55Z","body_markdown":"---\npublished: true\ntitle: \"Controlling the file chooser within a Cypress.io test\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-native-event/assets/header.jpg\"\ndescription: \"You were told that you can not control the 'open file' dialog in Cypress? I can tell you, that you were fooled!\"\ntags: cypress, javascript, csharp, testing\nseries: Real File Upload Test\ncanonical_url:\n---\n\n>**Note**: Get the code [here](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/cypress-file-chooser/code)\n\nOK. So you decided to do a real file upload test in Cypress? I appreciate your decision! First you should read through this post:\n\n{% link https://dev.to/gabbersepp/doing-native-clicks-with-cypress-io-and-open-file-dialog-18n6 %}\n\nNow I have to warn you: **This solution will only work on Windows!**\n\n# My solution - quick and dirty\nI make use of the fact that Chrome uses the system file dialog and not something own. Due to that we can rely on the Windows Messaging system and can control the dialog by Win32 API calls. I won't go too much into the details because there are a bunch of good tutorials out there that describe the Win32 API and the Windows Messages better than me ever could. :smile:\n\n# Using Win32 API Calls in CSharp\nTo use functions like `SendMessage` and `FindWindowEx` you have to load `user32.dll`. To make your `C#` life easier, I recommend the usage of [PInvoke.net](http://pinvoke.net/default.aspx/user32.FindWindowEx), a collection of many calls into the system DLLs and often with some example code!\n\nIn my case I was able to copy & paste the example for `SendMessage` and `FindWindowEx` without adjustments.\n\n# File Dialog Handles\nLet's examine the Window structure of the dialog. I use `Microsoft Spy++` for this task. You can find it in your `Visual Studio` installation path:\n```\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\Common7\\Tools\\spyxx_amd64.exe\n```\n\nFirst we look for a Window whose title is *Öffnen / Open*:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-file-chooser/assets/dialog-handle.jpg)\n\nNow as we have the parent handle, we can successively go downwards and select the `ComboBoxEx32 > ComboBox > Edit`:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-file-chooser/assets/edit-handel.jpg)\n\nThe code is very simple:\n\n```cs\n// ./code/tool/Tool/Tool/Program.cs#L21-L26\n\nIntPtr fileChooserHandle = FindHandle(IntPtr.Zero, null, \"Öffnen\");\n\nvar comboboxExHandle = FindHandle(fileChooserHandle, \"ComboBoxEx32\", null);\nvar comboboxHandle = FindHandle(comboboxExHandle, \"ComboBox\", null);\nvar editHandle = FindHandle(comboboxHandle, \"Edit\", null);\nvar btnHandle = FindWindowEx(fileChooserHandle, IntPtr.Zero, \"Button\", null);\n```\n\nI use a fail-safe implementation that tries several times to get the handle. Actually I only need this for the `fileChooserHandle` because it may take some time to open the dialog. If we request the handle to early, the whole process will fail.\n\n```cs\n// ./code/tool/Tool/Tool/Program.cs#L37-L56\n\nstatic IntPtr FindHandle(IntPtr parentHandle, string className, string title)\n{\n  IntPtr handle = IntPtr.Zero;\n\n  for (var i = 0; i < 50; i++)\n  {\n    handle = FindWindowEx(parentHandle, IntPtr.Zero, className, title);\n\n    if (handle == IntPtr.Zero)\n    {\n      Thread.Sleep(100);\n    }\n    else\n    {\n      break;\n    }\n  }\n\n  return handle;\n}\n```\n\n# Setting the file path\nWe just have to send `WM_SETTEXT` message to the `Edit` component and click the \"*Öffnen / Open*\" button:\n\n```cs\n// ./code/tool/Tool/Tool/Program.cs#L28-L34\n\n// WM_SETTEXT\nSendMessage(editHandle, 0x000C, IntPtr.Zero, new StringBuilder(args[0]));\n\n// LeftButtonDown\nSendMessage(btnHandle, 513, IntPtr.Zero, null);\n// LeftButtonUp\nSendMessage(btnHandle, 514, IntPtr.Zero, null);\n```\n\n# Calling it from Cypress.io\nYou have to add a new task:\n\n```js\n// ./code/cypress/cypress/plugins/index.js#L37-L43\n\nselectFile: async(value) => {\n  return new Promise(resolve => {\n    execFile(\"C:/git/dev.to-posts/blog-posts/cypress-file-chooser/code/tool/Tool/Tool/bin/Debug/Tool.exe\", [value], {}, (error) => {\n      resolve(\"ready\" + JSON.stringify(error));\n    })\n  })\n},\n```\n\nDon't forget the `execFile` import:\n```js\nconst {execFile} = require(\"child_process\")\n```\n\nAnd use it as always:\n\n```js\n// ./code/cypress/cypress/integration/spec.js#L15-L26\n\ncy.get(\"input\").first().then($element => {\n  const element = $element[0];\n  element.scrollIntoView();\n  var rect = element.getBoundingClientRect();\n  // wait only needed for demonstration purposes\n  cy.task(\"nativeClick\", {x: parseInt(rect.x) + addX, y: parseInt(rect.y) + addY })\n  .wait(1000)\n  .task(\"selectFile\", \"C:\\\\git\\\\dev.to-posts\\\\blog-posts\\\\cypress-file-chooser\\\\code\\\\cypress\\\\package.json\")\n  .wait(1000)\n  .get(\"div\", { timeout: 10000 })\n  .should(\"contain\", \"package.json\")\n})\n```\n\n# Caveats\n+ If you have two file dialogs open, the outcome of that search is not deterministic! If this is the case in your setup you have to adjust the code that looks for the dialog handle. I just made it very simple. You can of course adjust the search logic just as you need it.\n+ Use backslashes in the path! Otherwise the file dialog won't accept the path!\n\n# Additional Links\n[Microsoft Spy++](https://docs.microsoft.com/de-de/visualstudio/debugger/how-to-start-spy-increment?view=vs-2019)\n[Windows Messages](https://docs.microsoft.com/en-us/windows/win32/winmsg/messages-and-message-queues)\n[WM_LBUTTONDOWN](https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-lbuttondown)\n[WM_LBUTTONUP](https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-lbuttonup)\n[PInvoke.net: Win32 API Calls in .NET](http://pinvoke.net)\n\n# Summary\nI showed you how you can control the File Dialog. Using this approach you can build very realistic file upload test scenarios. This approach can be extended to other use cases as well. Let me know if you have another use case for that!\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":6,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s---tuHXGxP--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-native-event/assets/header.jpg","tag_list":["cypress","javascript","csharp","testing"],"canonical_url":"https://dev.to/gabbersepp/controlling-the-file-chooser-within-a-cypress-io-test-4ogi","reading_time_minutes":4,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":342174,"title":"Doing native clicks with Cypress.io and open file dialog","description":"Using native click events to open the file dialog in chrome by code.","published":true,"published_at":"2020-05-23T13:33:25.301Z","slug":"doing-native-clicks-with-cypress-io-and-open-file-dialog-18n6","path":"/gabbersepp/doing-native-clicks-with-cypress-io-and-open-file-dialog-18n6","url":"https://dev.to/gabbersepp/doing-native-clicks-with-cypress-io-and-open-file-dialog-18n6","comments_count":0,"public_reactions_count":7,"page_views_count":5644,"published_timestamp":"2020-05-23T13:33:25Z","body_markdown":"---\npublished: true\ntitle: \"Doing native clicks with Cypress.io and open file dialog\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-native-event/assets/header.jpg\"\ndescription: \"Using native click events to open the file dialog in chrome by code.\"\ntags: cypress, javascript, debug, testing\nseries: Real File Upload Test\ncanonical_url:\n---\n\n>**Note**: Get the code [here](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/cypress-native-event/code)\n\nThere are some rare cases where `cy.get(...).click()` won't work properly. If you encounter such a situation, you should give this approach a try. In this post we are opening the file chooser programmatically by click.\n\n# Application under test\nWe use a very simple HTML construct:\n\n```html\n<!-- ./code/index.html -->\n\n<html>\n<head>\n    <style>\n        html, body {\n            margin: 0;\n            padding: 0;\n        }\n    </style>\n</head>\n<body>\n    <input type=\"file\">Choose your file!</input>\n</body>\n</html>\n\n```\n\nSo nothing special. Let's now write a test that clicks into that button.\n\n# Open file dialog\n\nWe do a simple `cy.get(\"input\").click();`. You should now see nothing. Open the DevTools and you should see a warning:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-native-event/assets/warning.jpg)\n\nOpening the file chooser by code has been disabled due to security reasons, which makes sense of course.\n\n# Native events vs. synthetic events\n\n`Synthetic events` are called that ones you call normally in your code, like `$el.click()`. They are simulated and produced by `Javascript`. `Native events` are produced by the browser. The latter simulate the user behavior better but lack the possibility that synthetic events provide. \n\nUsing a native click event you can instruct the browser to **click onto the screen at position x:y** whereas using a synthetic click you can instruct to **trigger a click event on element `div[id='test']`**. So what is the difference? Imagine a `button` that is covered completely by a `div` whose `z-index` is higher. Doing a native click onto the button won't have an effect because the `div` receives it. Doing a synthetic click onto the `button` will trigger the button's click event handler.\n\n# Trigger native events\n\nNative events can be emitted by at least two different approaches:\n+ using Windows Messages (low level Win32 API call to `SendMessage`)\n+ using Chrome Debugger Protocol\n\nAs I don't think that `Windows Messages` is necessary, I will focus on the latter :smile:\n\n# Chrome Debugger Protocol\nI've already written a blog post about using it in `Cypress`, so I won't repeat everything.\n\n{% link https://dev.to/gabbersepp/low-level-access-to-chrome-debugger-protocol-and-cypress-2epk %}\n\n# Mouse event\nThe method for emitting a mouse event is called [Input.dispatchMouseEvent](https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchMouseEvent) and needs at least following parameters to work for our use case.\n\n**Pressing the mouse**\n```\n{\n    \"id\": 1,\n    \"method\": \"Input.dispatchMouseEvent\",\n    \"params\": {\n        \"type\": \"mousePressed\",\n        \"button\": \"left\",\n        \"x\": ...,\n        \"y\": ...,\n        \"clickCount\": 1\n    }\n}\n```\n\n**Releasing it**\n```\n{\n    \"id\": 2,\n    \"method\": \"Input.dispatchMouseEvent\",\n    \"params\": {\n        \"type\": \"mouseReleased\",\n        \"button\": \"left\",\n        \"x\": 519,\n        \"y\": 46,\n        \"buttons\": 1,\n        \"clickCount\": 1\n    }\n}\n```\n\nWhen releasing it you must set `buttons` to `1` which tells chrome that when sending the `Release` event, the left mouse button is pressed. Leaving this optional parameter empty did not work for me. \n\nThe **x** and **y** coordinates are relative to the top left edge in the viewport:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-native-event/assets/top-left.jpg)\n\n# Getting X and Y\n\nYou might come up with the idea to do this to get the X/Y coordinates:\n\n```js\ncy.get(\"input\").then($elements => {\n  var first = $elements[0];\n  var rect = first.getBoundingClientRect();\n  var x = rect.x;\n  var y = rect.y;\n})\n```\n\nUnfortunately this is not correct:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-native-event/assets/wrong-rect.jpg)\n\nIn the picture it shows `0` for both, x and y. But `(0|0)` would produce a click to the top left edge of the viewport which is not what we want. The problem is that Cypress renders the application within an `iframe`:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-native-event/assets/iframe.jpg)\n\nBut a native click event does not know what an `iframe` is. And the application does not know that there is a world outside of it. \n\nTo solve this issue you can select the `div` with the class `size-container` (it contains the `iframe`), retrieve its `x` and `y` and adding them onto the element's `x` and `y`. But keep in mind that there are `iframes` involved so you must choose the right one:\n\n```js\n// ./code/cypress/integration/spec.js#L10-L25\n\nit('file dialog open succeeds', () => {\n  const sizeContainer = window.frames[\"parent\"].document.querySelector(\".size-container\");\n  const cypressAppFrameContainerRect = sizeContainer.getBoundingClientRect();\n  const marginLeft = parseFloat(getComputedStyle(sizeContainer).marginLeft);\n\n  // pixel values passed to chrome debugger protocol must be integer\n  const addX = Math.ceil(cypressAppFrameContainerRect.x + marginLeft);\n  const addY = Math.ceil(cypressAppFrameContainerRect.y);\n\n  cy.get(\"input\").first().then($element => {\n    const element = $element[0];\n    element.scrollIntoView();\n    var rect = element.getBoundingClientRect();\n    cy.task(\"nativeClick\", {x: parseInt(rect.x) + addX, y: parseInt(rect.y) + addY });\n  })\n})\n```\n\n`element.scrollIntoView();` is necessary because we can't do a native click onto an element that is not within the visible area!\n\nYou also have to add the left-margin:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-native-event/assets/left-margin.jpg)\n\n# Sending the event\nBased upon the logic from the mentioned blog post we add a new Cypress task:\n\n```js\n// ./code/cypress/plugins/index.js#L30-L35\n\nnativeClick: async({ x, y }) => {\n  client = client || await CDP({ port })\n  await client.Input.dispatchMouseEvent( { type: \"mousePressed\", x, y, button: 'left', clickCount: 1 });\n  await client.Input.dispatchMouseEvent( { type: \"mouseReleased\", x, y, button: 'left', clickCount: 1, buttons: 1 });\n  return Promise.resolve(true);\n},\n```\n\n# Result\nOf course this code will open the file dialog :smile:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-native-event/assets/example.gif)\n\n# Troubleshooting\nWhen using this approach you should close the DevTools because otherwise the click event may be received by the DevTool Window. I haven't investigated this yet but maybe the command chooses the first available window to be fired on. If you need the DevTools to be opened during that command you should consider to take a look into the [Chrome DevTools protocol](https://chromedevtools.github.io/devtools-protocol/) to find a way to choose the right window.\n\n# Summary\nI have shown you how to do native events with Cypress. Do you ever had to use native events? let me know. I'm interested in the real world use cases.\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":7,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s---tuHXGxP--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-native-event/assets/header.jpg","tag_list":["cypress","javascript","debug","testing"],"canonical_url":"https://dev.to/gabbersepp/doing-native-clicks-with-cypress-io-and-open-file-dialog-18n6","reading_time_minutes":5,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":335019,"title":"Digging into a few callbacks and how you can obtain more information about an event","description":"I list some callbacks, what can be done with them and how you can obtain more information about an event.","published":true,"published_at":"2020-05-15T08:29:25.460Z","slug":"digging-into-a-few-callbacks-and-how-you-can-obtain-more-information-about-an-event-2b3m","path":"/gabbersepp/digging-into-a-few-callbacks-and-how-you-can-obtain-more-information-about-an-event-2b3m","url":"https://dev.to/gabbersepp/digging-into-a-few-callbacks-and-how-you-can-obtain-more-information-about-an-event-2b3m","comments_count":0,"public_reactions_count":1,"page_views_count":524,"published_timestamp":"2020-05-15T08:29:25Z","body_markdown":"---\npublished: true\ntitle: \"Digging into a few callbacks and how you can obtain more information about an event\"\ndescription: \"I list some callbacks, what can be done with them and how you can obtain more information about an event.\"\ntags: dotnet, debug, tutorial, cpp\nseries: Net-Profiler\ncanonical_url:\n---\n\n# A few callbacks explained\nUntil now we setup a simple profiler that is capable of logging every exception. Do you remember the output? It was just `exception thrown`, which may be useful but surely it will be much more useful if the exception name would be printed.\n\nIf you looked at several callback methods, you may have noticed, that often you get only an id. E.g. a `FunctionId` or a `ClassId` and such things. This makes sense as passing more information to the callbacks will increase the overall CPU & RAM load. On the other hand, you have to call a few methods to get more information. Unfortunately it is often not very obviously what kind of method you have to use. At least I found it a bit confusing. But maybe the whole process is documented somewhere in the .NET documentation :smile:\n\nTo make your life easier, I will show you some use cases. I will not write too much about it. I mean, I'm only calling some functions in a very stupid manner. So if you have questions, please ask and I'll try to answer them.\n\n\n# ExceptionThrown callback\nLet's take the example project from the last lesson. There we implemented the `ExceptionThrown` callback. As parameter you only get an `ObjectID`. Wouldn't it be nice if we could print the name of the exception? Let's do this.\n\n\n## Utils\nI create an own class for the methods that retrieve more information about an event. Let's call it `Utils`. You should be aware that I will not write the most performant code and you may encounter a lot of things that could be improved. But be sure that all of this has been done for easier understanding.\n\n\n## Get class name by object ID\nTo get more information about an event, utilize the instance of type `ICorProfilerInfo`. \n\n```cpp\nbool Utils::GetClassNameByObjectId(ObjectID objectId, char* output, ULONG outputLength) {\n  ClassID classId;\n  iCorProfilerInfo->GetClassFromObject(objectId, &classId);\n  return this->GetClassNameByClassId(classId, output, outputLength);\n}\n\nbool Utils::GetClassNameByClassId(ClassID classId, char* output, ULONG outputLength) {\n  ModuleID moduleId;\n  mdTypeDef typeDefToken;\n  IMetaDataImport* metadata;\n  wchar_t* className = new wchar_t[outputLength];\n  ULONG read = 0;\n\n  HRESULT hresult = iCorProfilerInfo->GetClassIDInfo(classId, &moduleId, &typeDefToken);\n\n  if (hresult < 0 || moduleId == 0) {\n    return false;\n  }\n\n  hresult = iCorProfilerInfo->GetModuleMetaData(moduleId, ofRead, IID_IMetaDataImport, (IUnknown**)&metadata);\n  hresult = metadata->GetTypeDefProps(typeDefToken, className, outputLength, &read, NULL, NULL);\n  metadata->Release();\n\n  memset(output, 0, outputLength);\n  wcstombs(output, className, outputLength);\n  delete[] className;\n  return true;\n}\n```\n\nThe callback needs to call the utility class:\n\n```cpp\nHRESULT __stdcall ProfilerCallback::ExceptionThrown(ObjectID thrownObjectID)\n{\n  char* className = new char[100];\n  utils->GetClassNameByObjectId(thrownObjectID, className, 100);\n  cout << \"\\t\\nfrom profiler: exception thrown: \" << className << \"\\r\\n\";\n  delete[] className;\n  return S_OK;\n}\n```\n\nAnd this is the output:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/digging-into-callbacks/assets/exception-name.jpg)\n\n\n# ObjectAllocated callback\nWe can use the newly created utility method to print **every allocated object**. Set following flags: `COR_PRF_MONITOR_OBJECT_ALLOCATED | COR_PRF_ENABLE_OBJECT_ALLOCATED`. \n\nAnd implement the callback:\n\n```cpp\nHRESULT __stdcall ProfilerCallback::ObjectAllocated(ObjectID objectID, ClassID classID)\n{\n  char* className = new char[1000];\n  if (utils->GetClassNameByClassId(classID, className, 1000)) {\n    cout << \"\\t\\nfrom profiler: class allocated: \" << className << \"\\r\\n\";\n  }\n  delete[] className;\n  return S_OK;\n}\n```\n\n\n# Retrieving stacktraces\nLet's say you want to observe all allocations of type `CatBowlEmptyException` and print out the stacktrace so you know where this happened. Fortunately the Profiler API provides you the `ICorProfilerInfo2::DoStackSnapshot` method which requests a stacktrace of the current thread (or of another one, but I won't cover this here). It awaits a pointer to a function that is called for every frame in the stacktrace. The requesting and the providing of the frames are synchronous which means, the next line after `DoStackSnapshot` is executed after the last frame was reported.\n\n## Activate\nYou must use the flag `COR_PRF_ENABLE_STACK_SNAPSHOT` to be able to request snapshots:\n\n```cpp\n iCorProfilerInfo->SetEventMask(.... | COR_PRF_ENABLE_STACK_SNAPSHOT);\n```\n\n\n## Signature of DoStackSnapshot\n\n```cpp\nDoStackSnapshot( \nThreadID thread,\nStackSnapshotCallback *callback,\nULONG32 infoFlags,\nvoid *clientData,\nBYTE context[  ],\nULONG32 contextSize)\n```\n\n+ **thread:** You can pass `0` which means you want to retrieve the stacktrace of the current thread.\n+ **callback:** See the discussion below\n+ **infoFlags:** Indicates whether a context containing the CPU state should be passed to the callback. In our simple example we don't care, so use `COR_PRF_SNAPSHOT_DEFAULT` here \n+ **clientData:** This is a pointer to anything you want to pass to the `callback`. You can use `0` if you don't want to pass anything.\n+ **context:** `0` if you want to retrieve the stacktrace of the current thread\n+ **contextSize:** also `0`\n\n\n## Signature of the Callback\n\n```cpp\nDoStackSnapshotCallback(\n\tFunctionID funcId,\n\tUINT_PTR ip,\n\tCOR_PRF_FRAME_INFO frameInfo,\n\tULONG32 contextSize,\n\tBYTE context[],\n\tvoid* clientData\n)\n```\n\n+ **funcId:** The `FunctionId` which can be used to get the function name. It is `0` if the current frame is an unmanaged function call. For this blog post I skip that frame in those cases.\n+ **ip**: Instruction pointer\n+ **frameInfo**: To be honest, I have no idea what data resists in that struct and I have not found any definition of that struct.\n+ **contextSize, context:** both will be null because we don't request them for this blog post\n+ **clientData:** exactly that thing you could pass in `DoStackSnapshot`.\n\n\n## Getting the function name based on the `FunctionID`\n\nAdd a new function to `Utils.cpp`:\n\n```cpp\nbool Utils::GetFunctionNameById(FunctionID functionId, char* output, ULONG outputLength) {\n  IMetaDataImport* metadata;\n  mdMethodDef methodToken;\n  mdTypeDef typeDefToken;\n  wchar_t* functionName = new wchar_t[1000];\n  ULONG wcbCount;\n  memset(functionName, 0, 1000);\n  iCorProfilerInfo->GetTokenAndMetaDataFromFunction(functionId, IID_IMetaDataImport, (IUnknown**)&metadata, &methodToken);\n  metadata->GetMethodProps(methodToken, &typeDefToken, functionName, 1000, &wcbCount, NULL, NULL, NULL, NULL, NULL);\n  wcstombs(output, functionName, outputLength);\n  metadata->Release();\n  delete[] functionName;\n  return true;\n}\n```\nI assumed that the last parameters of `GetMethodProps` are all optional. At least this compiles and runs without errors :-)\n\n\n## Gimme the code - ObjectAllocated\n\nWe slightly adjust the `ObjectAllocated` callback:\n\n```cpp\nHRESULT __stdcall ProfilerCallback::ObjectAllocated(ObjectID objectID, ClassID classID)\n{\n  char* className = new char[1000];\n\n  if (utils->GetClassNameByClassId(classID, className, 1000)) {\n    cout << \"\\t\\nfrom profiler: class allocated: \" << className << \"\\r\\n\";\n\n    if (strcmp(className, \"TestApp.CatBowlEmptyException\") == 0) {\n      char* stack = new char[1000];\n      memset(stack, 0, 1000);\n      SnapshotClientData clientData;\n      clientData.pUtils = utils;\n      clientData.stacktrace = stack;\n\n      iCorProfilerInfo->DoStackSnapshot(NULL, &DoStackSnapshotCallback, COR_PRF_SNAPSHOT_DEFAULT, &clientData, 0, 0);\n      cout << \"stack:\\r\\n\" << stack;\n\n      delete[] stack;\n    }   \n  }\n\n  delete[] className;\n  return S_OK;\n}\n```\n\n`SnapshotClientData` is a struct created by me to transport the `Utils` object and a pointer to the stack char array:\n\n```cpp\nstruct SnapshotClientData {\n  Utils* pUtils;\n  char* stacktrace;\n};\n```\n\n\n## Gimme the code - DoStackSnapshotCallback\n\n```cpp\nHRESULT __stdcall DoStackSnapshotCallback(\n  FunctionID funcId,\n  UINT_PTR ip,\n  COR_PRF_FRAME_INFO frameInfo,\n  ULONG32 contextSize,\n  BYTE context[],\n  void* clientData\n) {\n  if (funcId == 0) {\n    return S_OK;\n  }\n\n  SnapshotClientData* snapshotClientData = (SnapshotClientData*)clientData;\n  char* output = snapshotClientData->stacktrace + strlen(snapshotClientData->stacktrace);\n  output[0] = '\\r';\n  output[1] = '\\n';\n  output += 2;\n  snapshotClientData->pUtils->GetFunctionNameById(funcId, output, 1000);\n\n  return S_OK;\n}\n```\n\nI manipulated the pointer `output` to append the next frame to `output` plus a `new line`. Not sure if this is considered to be best practice in `C++` :sweat_smile:\n\nPlease note that I added the callback not to the `ProfilerCallback` class because I did not succeed in passing a pointer to a member function into `DoStackSnapshot`.\n\n\n## Outcome\n\nGiven a weird and senseless program with some nested calls I get this output:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/digging-into-callbacks/assets/stacktrace.jpg)\n\n\n# Summary\n\nI showed you some use cases and how you can handle them. I hope you got a little insight into the process of event handling. In one of the next article we are taking a look at `FunctionEnter` and `FunctionLeave` stuff. But be aware to see some ASM code :smile: Also I try to retrieve the line number from a stack frame. We'll see if that works.\n \n\n# Additional Links\n\n[DoStackSnapshot](https://docs.microsoft.com/de-de/dotnet/framework/unmanaged-api/profiling/icorprofilerinfo2-dostacksnapshot-method)\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":1,"cover_image":null,"tag_list":["dotnet","debug","tutorial","cpp"],"canonical_url":"https://dev.to/gabbersepp/digging-into-a-few-callbacks-and-how-you-can-obtain-more-information-about-an-event-2b3m","reading_time_minutes":5,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":333930,"title":"How to debug a .NET profiler","description":"A profiler can not so easily be debugged. In this article I show you how this can be achieved by using WinDbg","published":true,"published_at":"2020-05-13T06:54:19.741Z","slug":"how-to-debug-a-net-profiler-32eh","path":"/gabbersepp/how-to-debug-a-net-profiler-32eh","url":"https://dev.to/gabbersepp/how-to-debug-a-net-profiler-32eh","comments_count":0,"public_reactions_count":8,"page_views_count":686,"published_timestamp":"2020-05-13T06:54:19Z","body_markdown":"---\npublished: true\ntitle: \"How to debug a .NET profiler\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/debugging-profiler/assets/header.jpg\"\ndescription: \"A profiler can not so easily be debugged. In this article I show you how this can be achieved by using WinDbg\"\ntags:  clr, debug, dotnet, windbg\nseries: Net-Profiler\ncanonical_url:\n---\n\nIn this article I just summarize shortly how you can apply what I've already written to profiler:\n\n{% link https://dev.to/gabbersepp/how-to-debug-an-unmanaged-application-with-windbg-2j23 %}\n\n# Code example\nI just copied the [code from the last article](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/net-internals/how-does-profiler-work/code/DevToNetProfiler). Our goal is to set a breakpoint in `ProfilerCallback::ExceptionThrown` in line `33`. then we can inspect the parameter `objectID`. I will do this very quickly. If you want more information, go to the blog post I mentioned.\n\n# Howto\n+ Add a `Console.Read();` at the very beginning of the .NET test application. This gives us time to attach a debugger\n+ Start app by executing `start.bat`\n+ Start WinDbg & attach to process of `TestApp`\n+ set breakpoint: `bp DevToNetProfiler!ProfilerCallback::ExceptionThrown`\n+ enter `g + enter` to continue\n+ enter any key in your `TestApp`\n+ your breakpoint should be hit and you should see the source code:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/debugging-profiler/assets/breakpoiont-hit.jpg)\n\n+ go to `View > Locals` to list all local variables, including parameters:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/debugging-profiler/assets/locals.jpg)\n\n# How to debug Initialize()?\nLet's say you want to debug the `Initialize()` method. The steps above won't work because if you attach to the running process, the `Initialize()` has already finished. But don't worry, this can be done with a few extra steps.\n\n## Adjust the `start.bat`\nThe key here is to expose the environment variables in the context where the `TestApp` is running. To do this you don't need to start the app directly from the batch file. So open `start.bat` and replace:\n\n```\nSTART TestApp/bin/Debug/TestApp.exe\n```\n\nwith the path where the `WinDbg.exe` is on your PC:\n\n```\nSTART C:\\Tools\\WinDbg\\windbg.exe\n```\n\n## Start WinDbg\nExecute the batch file. WinDbg should now appear. \n\n## Execute TestApp.exe\nGo to `File > Open Executable...` and select `TestApp.exe`. WinDbg should immediately stop the execution:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/debugging-profiler/assets/start-process.jpg)\n\n## Set a breakpoint\nDo you remember the `defered breakpoints` I mentioned in my WinDbg blog post? As WinDbg stopped directly after `TestApp` was executed, nothing was loaded yet. So every breakpoint will be a `defered` one.\n\nEnter the breakpoint:\n```\nbp DevToNetProfiler!ProfilerCallback::Initialize\n```\n\nAnd you should see this message:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/debugging-profiler/assets/defered.jpg)\n\n## Continue\nEnter `g + enter` to continue the execution. In my setup, WinDbg stops again with this message:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/debugging-profiler/assets/second-break.jpg)\n\nWe don't care about that message so let the app continue again. Now the breakpoint is hit:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/debugging-profiler/assets/initialize-breakpoint.jpg)\n\n\n----\n\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":8,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--UE9vIR6g--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/debugging-profiler/assets/header.jpg","tag_list":["clr","debug","dotnet","windbg"],"canonical_url":"https://dev.to/gabbersepp/how-to-debug-a-net-profiler-32eh","reading_time_minutes":3,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":326459,"title":"IPC between C# and C++ by using named pipes","description":"Use named pipes to setup inter process communication between a C++ DLL and a C# application.","published":true,"published_at":"2020-05-03T18:14:45.540Z","slug":"ipc-between-c-and-c-by-using-named-pipes-4em9","path":"/gabbersepp/ipc-between-c-and-c-by-using-named-pipes-4em9","url":"https://dev.to/gabbersepp/ipc-between-c-and-c-by-using-named-pipes-4em9","comments_count":1,"public_reactions_count":22,"page_views_count":13091,"published_timestamp":"2020-05-03T18:14:45Z","body_markdown":"---\npublished: true\ntitle: \"IPC between C# and C++ by using named pipes\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/ipc-by-named-pipes-cpp-csharp/assets/header.jpg\"\ndescription: \"Use named pipes to setup inter process communication between a C++ DLL and a C# application.\"\ntags: csharp, cpp, communication, network\nseries:\ncanonical_url:\n---\n\n>**Note**: Get the full working example here: [Sample project](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/ipc-by-named-pipes-cpp-csharp/code/IpcCSharpCpp)\n\nWhile [writing my own .NET profiler](https://dev.to/gabbersepp/create-a-net-profiler-with-the-profiling-api-start-of-an-unexpected-journey-198n) I realized one problem: The profiler, written in C++, must be a DLL. If I want to provide a GUI, I want to do this with C# and WPF. How can both components, that share not the same memory, exchange data? \n\nIn a private project I used `named pipes` for inter process communication to let a `NodeJS` process communicate with a `C#` application so I decided to do the same with my profiler.\n\nIn this article, we build a small runnable example with two-way communication and a very very simple protocol.\n\n# Named vs anonymous pipes\nI have chosen named pipes, because I want to setup a bidirectional channel. The pipe server (C# application) should be able to send a configuration to the pipe client (C++) and after this first data exchange, only the client is sending data.\n[Anonymous pipes are one-way only](https://docs.microsoft.com/en-us/windows/win32/ipc/anonymous-pipes) as stated by Microsoft.\n\n# Pipe Server (C#)\nYou have to use the class `NamedPipeServerStream`.\n\n```cs\nstatic void Main(string[] args)\n{\n  var namedPipeServer = new NamedPipeServerStream(\"my-very-cool-pipe-example\", PipeDirection.InOut, 1, PipeTransmissionMode.Byte);\n  var streamReader = new StreamReader(namedPipeServer);\n  namedPipeServer.WaitForConnection();\n\n  var writer = new StreamWriter(namedPipeServer);\n  writer.Write(\"Hello from c#\");\n  writer.Write((char)0);\n  writer.Flush();\n  namedPipeServer.WaitForPipeDrain();\n\n  Console.WriteLine($\"read from pipe client: {streamReader.ReadLine()}\");\n  namedPipeServer.Dispose();\n}\n```\n\n+ **pipe name:** Self explanatory\n+ **direction:** I use `InOut` to be able to send something to the client\n+ **maxNumberOfServerInstances:** This should be `1` if you have only one client. You must increase the value if you want to handle parallel clients. We will see this in action later on.\n+ **transmission mode:** We are sending the data in a byte stream. This implies that the other side knows how many data should be sent. In our case we read until a line break occurs (client -> server) or a `\\0` byte is read (server -> client).\n+ **Flush():** Just tell the server, that it should clear it's buffer right now.\n+ **WaitForPipeDrain():** This causes the server and client to run serially by waiting for all bytes to be read. \n+ **Caveat:** two lines above I'm sending `(char)0`. Please be aware of the cast! Without it, an integer is sent which means 4 bytes where all bits are set to 0. The receiver awaits only one zero byte and thus will not read the remaining three bytes. They will be left in the buffer which forces `WaitForPipeDrain()` to wait forever. The cast ensures that only one byte is sent.  \n+ **ReadLine():** The client sends a string, terminated by `\\r\\n`. But you can build whatever protocol you want.\n\n# Pipe Client (C++)\nAlso very simple:\n\n```cpp\n#include <windows.h>\n#include <iostream>\n\nHANDLE fileHandle;\n\nvoid ReadString(char* output) {\n  ULONG read = 0;\n  int index = 0;\n  do {\n    ReadFile(fileHandle, output + index++, 1, &read, NULL);\n  } while (read > 0 && *(output + index - 1) != 0);\n}\n\nint main()\n{\n  // create file\n  fileHandle = CreateFileW(TEXT(\"\\\\\\\\.\\\\pipe\\\\my-very-cool-pipe-example\"), GENERIC_READ | GENERIC_WRITE, FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);\n\n  // read from pipe server\n  char* buffer = new char[100];\n  memset(buffer, 0, 100);\n  ReadString(buffer);\n\n  std::cout << \"read from pipe server: \" << buffer << \"\\r\\n\";\n\n  // send data to server\n  const char* msg = \"hello from c++\\r\\n\";\n  WriteFile(fileHandle, msg, strlen(msg), nullptr, NULL);\n}\n```\n\nA few points that needs to be mentioned:\n\n+ **pipe name**: On Windows, a pipe path must follow the naming convention: `\\\\\\\\.\\pipe\\<pipe-name>`. The dot is equal to `localhost` and can be replaced by remote server names. As a pipe is treated as a normal file, you have to specify the full path.\n+ **Access rights:** When defining a two-way pipe, your client must request as well `read` as `write` rights.\n+ **String termination:** As already seen in the server code, you must send `\\r\\n` at the end of the string. Of course, just a very simple \"protocol specification\".\n+ **Transmission mode:** As stated in the [official Microsoft documentation](https://docs.microsoft.com/en-us/windows/win32/ipc/named-pipe-type-read-and-wait-modes), by calling `CreateFile` the pipe client is initially in byte transmission mode.\n\nCompile both projects, execute the server first, than the client and you should get this result:\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/ipc-by-named-pipes-cpp-csharp/assets/result.jpg)\n\n# Troubleshooting\nIf you have troubles in bringing both components together, there is an easy possibility to check if the pipe has been opened. Open a powershell window and type: `get-childitem \\\\.\\pipe\\`. This will print all open pipes:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/ipc-by-named-pipes-cpp-csharp/assets/ps.jpg)\n\n# Concurrent clients\nIn the example above we can only handle one client. Multiple clients would be possible if you close the server and reopen it again. But to allow concurrent clients, you must create multiple instances of `NamedPipeServerStream`. Raising the `maxNumberOfServerInstances` parameter to 5 will allow 5 parallel connections. Using a number of connections that is less than wished amount of parallel instances leads to the exception `system.io.ioexception all pipe instances are busy`.\n\nA very simple and error prone solution would be:\n\n```cs\nvar instances = new Task[5];\nfor (int i = 0; i < instances.Length; i++)\n{\n  instances[i] = Task.Run(() =>\n  {\n    var namedPipeServer = new NamedPipeServerStream(\"my-very-cool-pipe-example\", PipeDirection.InOut, 5, PipeTransmissionMode.Byte);\n    var streamReader = new StreamReader(namedPipeServer);\n    namedPipeServer.WaitForConnection();\n\n    var writer = new StreamWriter(namedPipeServer);\n    writer.Write(\"Hello from c#\");\n    writer.Write((char)0);\n    writer.Flush();\n    namedPipeServer.WaitForPipeDrain();\n\n    Console.WriteLine($\"read from pipe client: {streamReader.ReadLine()}\");\n    namedPipeServer.Dispose();\n  });\n}\n\n// don't do this except you know what you are doing\nTask.WaitAll(instances);\n```\n\n# Summary\nI showed you in a quick and dirty example how you can communicate between a C++ and a C# component. \n\n# Additional Links\n+ [Microsoft Win32 documentation](https://docs.microsoft.com/en-us/windows/win32/ipc/named-pipes)\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":22,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--8bEHg_7W--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/ipc-by-named-pipes-cpp-csharp/assets/header.jpg","tag_list":["csharp","cpp","communication","network"],"canonical_url":"https://dev.to/gabbersepp/ipc-between-c-and-c-by-using-named-pipes-4em9","reading_time_minutes":4,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":322785,"title":"How does a .NET profiler work?","description":"Before doing cool stuff with your .NET profiler, we should understand a few principles","published":true,"published_at":"2020-05-02T11:17:27.776Z","slug":"how-does-a-net-profiler-work-49e5","path":"/gabbersepp/how-does-a-net-profiler-work-49e5","url":"https://dev.to/gabbersepp/how-does-a-net-profiler-work-49e5","comments_count":0,"public_reactions_count":7,"page_views_count":881,"published_timestamp":"2020-05-02T11:17:27Z","body_markdown":"---\npublished: true\ntitle: \"How does a .NET profiler work?\"\ndescription: \"Before doing cool stuff with your .NET profiler, we should understand a few principles\"\ntags: dotnet, debug, tutorial, cpp\nseries: Net-Profiler\ncanonical_url:\n---\n\n>**[Get the code for this tutorial](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/net-internals/how-does-profiler-work/code/DevToNetProfiler)**\n\n# Introduction\nIn the last article we built a small runnable example. To start just use the template we created there. If you don't have it yet, visit the article and download the base profiler project.\n\n{% link https://dev.to/gabbersepp/create-a-net-profiler-with-the-profiling-api-start-of-an-unexpected-journey-198n %}\n\n>**Attention!** Most of the functions that are used to query information from the profiler return a `HRESULT`. You should check if this value is `0` (error) or not. For the sake of simplicity I will omit all those checks because they make the code harder to understand. This counts for all following blog posts about this topic.\n\n# Profiler loading\nAs mentioned in the first post, the profiler is loaded along with the application. If the profiler is called, it is called by the application's thread. If multiple threads are running in your app and every thread triggers events, all those events arrive \"at the same time\" at your profiler in different threads. So you have to ensure that your profiler is threadsafe.\n\n## ICorProfilerCallback\nOur profiler must implement that interface. Do you remember all those stubs we created? That are callbacks called by the CLR on certain events.\n\n## ICorProfilerInfo\nThe profiler should request an instance of type `ICorProfilerInfo`. This object is a bridge between the profiler and the profiled app. You can request the function name for a given function id for example. We will see some of it's power in the next articles.\n\n## Lifecycle\nWell there are two functions that can somehow be identified as `Lifecyclefunctions`. \n+ **Initialize()** is called after the CLR has initialized and loaded up the profiler. This is a very important point in time because it is the only place where you can setup the profiler.\n+ **Shutdown()** is called when the application gets closed\n\n## Initialize\nWe will focus on **Initialize** because as already said, you must setup your profiler. \nWhat you must do:\n+ request an instance of type `ICorProfilerInfo` (or any newer version - you know, the numeric suffix)\n+ set flags to tell the CLR which events you want to receive\n+ maybe set some hooks (we will see this later)\n\n**Necessary steps:**\n\n+ add `include <corprof.h>` \n+ add `CComQIPtr<ICorProfilerInfo2> iCorProfilerInfo;` variable to the outside of the class. \n+ add `pICorProfilerInfoUnk->QueryInterface(IID_ICorProfilerInfo2, (LPVOID*)&iCorProfilerInfo);` to `Initialize()`\n\nThe `include` is required because it contains the definition of `IID_ICorProfilerInfo2`. The `iCorProfilerInfo` variable should not be an instance variable. This makes it much easier to handle. We need it later on to request metadata about the application.\n\n**Flags:**\n\n`ICorProfilerInfo` has a method `SetEventMask()`. You must pass a `DWORD` that reflects the events you want to be notified. A full list of all flags can be found [here](https://docs.microsoft.com/de-de/dotnet/framework/unmanaged-api/profiling/cor-prf-monitor-enumeration). In this example I choose `COR_PRF_MONITOR_EXCEPTIONS` because I want to monitor all exceptions that occur:\n\n```cpp\n  iCorProfilerInfo->SetEventMask(COR_PRF_MONITOR_EXCEPTIONS);\n```\n\n**The function now looks like this:**\n\n```cpp\nCComQIPtr<ICorProfilerInfo2> iCorProfilerInfo;\nHRESULT __stdcall ProfilerCallback::Initialize(IUnknown* pICorProfilerInfoUnk)\n{\n  pICorProfilerInfoUnk->QueryInterface(IID_ICorProfilerInfo2, (LPVOID*)&iCorProfilerInfo);\n  iCorProfilerInfo->SetEventMask(COR_PRF_MONITOR_EXCEPTIONS);\n\n  return S_OK;\n}\n```\n\nDepending on the flags you set you can use different callback methods (that are all those stubs we created in `ProfilerCallback.cpp`). In order to know which one you need, go the [the documentation](https://docs.microsoft.com/de-de/dotnet/framework/unmanaged-api/profiling/cor-prf-monitor-enumeration) and search for `COR_PRF_MONITOR_EXCEPTIONS`:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-does-profiler-work/assets/COR_PRF_MONITOR_EXCEPTIONS.jpg)\n\n## ExceptionThrown Callback\n\nWe focus on the `ExceptionThrown` callback and fill it with some stupid logic:\n\n```cpp\nHRESULT __stdcall ProfilerCallback::ExceptionThrown(ObjectID thrownObjectID)\n{\n  cout << \"from profiler: \\t\\t\\texception thrown\\r\\n\";\n  return S_OK;\n}\n```\n\nAdjust the `Program.cs` of the test app and throw an exception:\n\n```cs\nstatic void Main(string[] args)\n{\n  try\n  {\n    throw new Exception();\n  }\n  catch\n  {\n\n  }\n\n  Console.Read();\n}\n```\n\nNow compile everything and execute `start.bat`:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-does-profiler-work/assets/first-exception.jpg)\n\nCongratulations, you created your first profiler!\n\n# Threading\nLet's see in which thread a profiler is executed. We keep the code from the sections above but adjust the `ExceptionThrown` callback a bit. I suggest to print the current thread id. This can be done by including `<thread>` and adjusting the message:\n\n```cpp\n// ./code/DevToNetProfiler/DevToNetProfiler/ProfilerCallback.cpp#L31-L35\n\nHRESULT __stdcall ProfilerCallback::ExceptionThrown(ObjectID thrownObjectID)\n{\n  cout << \"from profiler: \\t\\t\\texception thrown in thread \" << this_thread::get_id() << \"\\r\\n\";\n  return S_OK;\n}\n```\n\nAlso you should print the thread id in your `C#` app:\n\n```cs\n// ./code/DevToNetProfiler/TestApp/Program.cs#L8-L21\n\nstatic void Main(string[] args)\n{\n  try\n  {\n    throw new Exception();\n  }\n  catch\n  {\n\n  }\n\n  Console.WriteLine($\"from app:\\tthread id: {AppDomain.GetCurrentThreadId()}\");\n  Console.Read();\n}\n```\n\nAnd this should be the result:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-does-profiler-work/assets/thread-id.jpg)\n\nBoth components have the same thread id.\n\n# Bitness\nAs always when dealing with native code, you must take the bitness into consideration. This is especially true if you want to use `FunctionEnter/Leave` callbacks. \nThe simple rule is: If the .NET app runs as 32Bit app, your profiler must be compiled as 32Bit profiler and vice-versa.\n\n## .NET and bitness\nRead this article, if you want to read more about bitness in .NET and `Visual Studio`:\n{% link https://dev.to/gabbersepp/know-the-bitness-of-your-net-application-1c6 %}\n\n## What happens if we ignore the bitness?\nLet the profiler being compiled to 32Bit and set the TestApp to 64Bit. The message from the profiler is missing now:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-does-profiler-work/assets/wrong-bitness-output.jpg)\n\nAdditionally we can find an error message in the windows event viewer:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-does-profiler-work/assets/wrong-bitness-event.jpg)\n\n\n# Summary\nThis article showed the basics of a profiler. I think this is enough to get an insight. Do you miss some information that seems relevant to you? Let me know!\n\nIn the next articles I want to focus on some use cases. Stay tuned if you want to see some assembler code! \n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":7,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--jB1X88vz--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-does-profiler-work/assets/header.jpg","tag_list":["dotnet","debug","tutorial","cpp"],"canonical_url":"https://dev.to/gabbersepp/how-does-a-net-profiler-work-49e5","reading_time_minutes":5,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":324236,"title":"Know the bitness of your .NET application","description":"A short post about bitness in .NET applications","published":true,"published_at":"2020-05-01T16:48:18.872Z","slug":"know-the-bitness-of-your-net-application-1c6","path":"/gabbersepp/know-the-bitness-of-your-net-application-1c6","url":"https://dev.to/gabbersepp/know-the-bitness-of-your-net-application-1c6","comments_count":0,"public_reactions_count":5,"page_views_count":1140,"published_timestamp":"2020-05-01T16:48:18Z","body_markdown":"---\npublished: true\ntitle: \"Know the bitness of your .NET application\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/net-bitness/assets/header.jpg\"\ndescription: \"A short post about bitness in .NET applications\"\ntags: dotnet, csharp, tutorial, environment\nseries:\ncanonical_url:\n---\n\n#  32Bit or 64Bit - Can  you tell?\nWhile developing a .NET profiler, I struggled a bit with the bitness of my test application. So I decided to write down my findings. If you want to read more about the profiler, you should follow my series about it:\n\n{% link https://dev.to/gabbersepp/create-a-net-profiler-with-the-profiling-api-start-of-an-unexpected-journey-198n %}\n\n# Any CPU\nDo you know this `Any Cpu`, that is selected per default in Visual Studio:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/net-bitness/assets/any-cpu-jpg.JPG)\n\nI see this all day long but never asked myself what this actually means. So I went to stackoverflow and found a very good [answer](https://stackoverflow.com/a/41766077/9809950). When compiled with `Any CPU` the app will be executed as 32Bit or 64Bit process. This table shows how an app will be executed:\n\n||X86 Windows|x64 Windows|\n|---|---|---|\n|Any CPU|32 Bit app|64 Bit app|\n|Any CPU (prefer 32Bit)|32 Bit app|WoW64 App (simulation of 32Bit applications under Windows 64Bit)|\n\nSo using `Any CPU` you need not to publish your app in two versions.\n\n# Prefer 32 Bit\nBut what means `Prefer 32 Bit`? Right-click onto your project and go to `Properties > Build`. Here you should see a checkbox:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/net-bitness/assets/prefer-32bit.jpg)\n\n# Explicitly set the bitness\nAbove the checkbox you can set the bitness of your app explicitly in the `target platform` dropdown:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/net-bitness/assets/bitness-selection.jpg)\n\n# Proving the bitness\nOK. You compiled your app with `Any CPU` and you execute it somewhere. How can you determine the bitness? This is easy. Open the task manager, find your process and read the content of the `platform` column:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/net-bitness/assets/taskmanager.jpg)\n\n# Installation paths\nYou want to see the installed versions of .NET framework? On my Windows 10, the runtimes are installed in this path: `C:\\Windows\\Microsoft.NET`.\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/net-bitness/assets/install-path.jpg)\n\n# Checking the bitness in your code\nAn old trick is to request the size of `IntPtr` which will be 4 bytes within a 32Bit process and 8 bytes within a 64Bit process:\n\n```cs\nConsole.WriteLine($\"IntPtr size: {IntPtr.Size}\");\n```\n\nSince .NET4 you can use:\n\n```cs\nConsole.WriteLine($\"System.Environment.Is64BitOperatingSystem: {System.Environment.Is64BitOperatingSystem}\");\nConsole.WriteLine($\"System.Environment.Is64BitProcess: {System.Environment.Is64BitProcess}\");\n```\n\nOn my Windows I get this result:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/net-bitness/assets/system_environment.jpg)\n\n# Summary\nI think in most cases you don't need to care attention about the bitness. But if you have to, this article hopefully helps you a bit.\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":5,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--TmMK4uzA--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/net-bitness/assets/header.jpg","tag_list":["dotnet","csharp","tutorial","environment"],"canonical_url":"https://dev.to/gabbersepp/know-the-bitness-of-your-net-application-1c6","reading_time_minutes":3,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":322762,"title":"Create a .NET profiler with the Profiling API - Start of an unexpected journey","description":"The Profiling API is a powerful beast that let's you do magic things with a .NET application. This article gives you a first insight.","published":true,"published_at":"2020-04-30T14:27:36.297Z","slug":"create-a-net-profiler-with-the-profiling-api-start-of-an-unexpected-journey-198n","path":"/gabbersepp/create-a-net-profiler-with-the-profiling-api-start-of-an-unexpected-journey-198n","url":"https://dev.to/gabbersepp/create-a-net-profiler-with-the-profiling-api-start-of-an-unexpected-journey-198n","comments_count":0,"public_reactions_count":11,"page_views_count":3915,"published_timestamp":"2020-04-30T14:27:36Z","body_markdown":"---\npublished: true\ntitle: \"Create a .NET profiler with the Profiling API - Start of an unexpected journey\"\ndescription: \"The Profiling API is a powerful beast that let's you do magic things with a .NET application. This article gives you a first insight.\"\ntags: dotnet, debug, tutorial, cpp\nseries: Net-Profiler\ncanonical_url:\n---\n\n>**[Get the code for this tutorial](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/net-internals/write-net-profiler/code/DevToNetProfiler)**\n\n# .NET Profiling API - What the hell?\nIf you write an app in C# or VB you normally don't get an exe that contains machine code. Instead the binary is full of `IL` code. This **I**ntermediate **L**anguage is similar to machine code but is built solely for a stack based layout. It does not make any assumptions about the registers. The transformation of `IL Code` to machine code is done by the `CLR` which can be built for every hardware architecture.\nHere now come the Profiling API into play. It can hook into several parts of the CLR to notify you if a function is going to be executed or if an exception is thrown and so on.\n\n>**Note:** In this blog post I show you what you need for a first runnable example. We will discuss the profiler in depths in subsequent blog posts. I just want to ensure that you have a runnable example before we start to understand everything. That makes experimenting a lot easier.\n \n# ICorProfilerCallback, ICorProfilerInfo, ....\nIf you reading about that topic you will often read something about a so called `ICorProfilerCallback` interface or a `ICorProfilerInfo` interface. And you also will see those names with a numeric suffix, e.g. `ICorProfilerCallback2`.\nThe `Profiling API` exists since version 1.x of the framework. Of course Microsoft sometimes added new functionality to those interfaces. So whenever you see a `2` or `3` ... this is a newer version of that interface.\n\nIf you want to know if you can use version X for a specific target framework version, you can go to [the Microsoft documentation](https://docs.microsoft.com/de-de/dotnet/framework/unmanaged-api/profiling/icorprofilercallback-interface) and then select the version you are interested in:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/write-net-profiler/assets/icorprofilercallback-docu.jpg)\n\nFor example click onto `ICorProfilerCallback8`. The documentation will tell you which .NET version this interface requires:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/write-net-profiler/assets/icorprofilercallback8.jpg)\n\n# Use cases\nOK. Let's talk about some real world use cases. With the `Profiling API` you can:\n+ measure the time between `function enter` and `function leave` which enables you to write a CPU profiler to track the total time of every function call\n+ notify you about every exception (except `StackOverflow`). Which sometimes may help when exceptions are caught somewhere and not logged\n+ maintain the depth of function calls to warn you if a `StackOverflow` may occur\n+ rewrite IL code to add functionality to an existing class. This enables you to override things that can't be overwritten in code. Some mocking frameworks use this approach\n+ .....\n\nYou see, many things you can play with :-)\n\n# The (maybe) bad side\nYou have to write the profiler with unmanaged code (mostly the people are using C++) because otherwise the profiler itself would trigger profiling events. As far as I know there is no possibility to write a profiler with managed code.\n\n# Some words about ATL\nYou will see that we use an `ATL` project template. Do not expect some useful information about this kind of project. I just added as much code as required to get a runnable profiler. But you don't need to know any internals about an `ATL` project. Just ignore that stuff.\n\n# Implementing the profiler\nNow it's getting dirty! My screenshots are partially in German. But the necessary parts should be clear, though.\n\n## Setup Visual Studio\nI am using `Visual Studio 2019` with these components installed:\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/write-net-profiler/assets/vs2019-modify.jpg)\nI am not sure if you need all of them. I just used the default setting of the VS installer.\n\n## Create a project\nThe first step towards your beautiful profiler is to create a project. Open Visual Studio and create a new project. Choose `ATL`:\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/write-net-profiler/assets/choose-atl-project.jpg)\n\nJust keep the default settings:\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/write-net-profiler/assets/atl-project-settings.jpg)\n\nVS creates two projects. Delete the second one whose name ends with `PS`. I don't know what's the purpose of that project. But my profiler compiles without it, too:\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/write-net-profiler/assets/created-projects.jpg)\n\nNormally the project is configured to get automatically registered in the registry. We do not want this. Also VS will throw an exception if you compile the project without administration rights. So right click onto your project and go to the linker settings. Set **Register output** to **No**:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/write-net-profiler/assets/linker-not-register.jpg)\n\nAlso you must add additional dependencies to the linker. Right click onto the project, go to linker and set those dependencies: `corguids.lib;%(AdditionalDependencies)`. This is necessary that the linker can find the `ICorProfilerInfo` stuff.\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/write-net-profiler/assets/linker-add-deps.jpg)\n\n## Add necessary code\nNow we need some extra code to turn this project into a profiler. We go through every file that needs to be touched.\n\n+ **framework.h:** Add `using namespace ATL;` at the end of the file.\n+ **Resource.h:** Add `#define IDR_PROFILER\t102` somewhere.\n+ **DevToNetProfiler.cpp:** Delete the function `STDAPI DllInstall(BOOL bInstall, _In_opt_  LPCWSTR pszCmdLine)`.\n+ **DevToNetProfiler.def:** Replace `LIBRARY` with `LIBRARY \"DevToNetProfiler.dll\"` and remove the line `DllInstall\t\tPRIVATE`\n+ **DevToNetProfiler.idl:** replace the whole file with this code:\n```cpp\nimport \"oaidl.idl\";\nimport \"ocidl.idl\";\n\n[\n  object,\n  uuid(103d660d-1cb4-4410-85dd-67b3aa489626),\n  helpstring(\"INetProfiler Interface\"),\n  pointer_default(unique)\n]\ninterface INetProfiler : IUnknown {\n};\n[\n  uuid(e0145544-414d-487e-9219-178b87ff0aaa),\n  version(1.0),\n  helpstring(\"NetProfiler 1.0 Type Library\")\n]\nlibrary DevToNetProfilerLib\n{\n  importlib(\"stdole2.tlb\");\n  [\n    uuid(b45048d5-6f44-4fbe-ae88-b468a5e4927a),\n    helpstring(\"Profiler Class\")\n  ]\n  coclass NetProfiler\n  {\n    [default] interface IUnknown;\n  };\n};\n```\n\nNow we must implement the ICorProfilerCallback. Don't be afraid. I will come back to this interface later on. **So create a header file `ProfilerCallback.h`** and insert that code:\n\n```cpp\n// ./code/DevToNetProfiler/DevToNetProfiler/ProfilerCallback.h\n\n#pragma once\n\n#include \"cor.h\"\n#include \"corprof.h\"\n#include \"framework.h\"\n#include \"DevToNetProfiler_i.h\"\n\nclass ATL_NO_VTABLE ProfilerCallback :\n  public CComObjectRootEx<CComSingleThreadModel>,\n  public CComCoClass<ProfilerCallback, &CLSID_NetProfiler>,\n  public ICorProfilerCallback2\n{\npublic:\n  ProfilerCallback();\n\n  DECLARE_REGISTRY_RESOURCEID(IDR_PROFILER)\n  BEGIN_COM_MAP(ProfilerCallback)\n    COM_INTERFACE_ENTRY(ICorProfilerCallback)\n    COM_INTERFACE_ENTRY(ICorProfilerCallback2)\n  END_COM_MAP()\n  DECLARE_PROTECT_FINAL_CONSTRUCT()\n\n  HRESULT FinalConstruct();\n  void FinalRelease();\n\n  // ICorProfilerCallback interface implementation\n  virtual HRESULT __stdcall Initialize(IUnknown* pICorProfilerInfoUnk);\n  virtual HRESULT __stdcall Shutdown();\n  virtual HRESULT __stdcall AppDomainCreationStarted(AppDomainID appDomainID);\n  virtual HRESULT __stdcall AppDomainCreationFinished(AppDomainID appDomainID, HRESULT hrStatus);\n  virtual HRESULT __stdcall AppDomainShutdownStarted(AppDomainID appDomainID);\n  virtual HRESULT __stdcall AppDomainShutdownFinished(AppDomainID appDomainID, HRESULT hrStatus);\n  virtual HRESULT __stdcall AssemblyLoadStarted(AssemblyID assemblyID);\n  virtual HRESULT __stdcall AssemblyLoadFinished(AssemblyID assemblyID, HRESULT hrStatus);\n  virtual HRESULT __stdcall AssemblyUnloadStarted(AssemblyID assemblyID);\n  virtual HRESULT __stdcall AssemblyUnloadFinished(AssemblyID assemblyID, HRESULT hrStatus);\n  virtual HRESULT __stdcall ModuleLoadStarted(ModuleID moduleID);\n  virtual HRESULT __stdcall ModuleLoadFinished(ModuleID moduleID, HRESULT hrStatus);\n  virtual HRESULT __stdcall ModuleUnloadStarted(ModuleID moduleID);\n  virtual HRESULT __stdcall ModuleUnloadFinished(ModuleID moduleID, HRESULT hrStatus);\n  virtual HRESULT __stdcall ModuleAttachedToAssembly(ModuleID moduleID, AssemblyID assemblyID);\n  virtual HRESULT __stdcall ClassLoadStarted(ClassID classID);\n  virtual HRESULT __stdcall ClassLoadFinished(ClassID classID, HRESULT hrStatus);\n  virtual HRESULT __stdcall ClassUnloadStarted(ClassID classID);\n  virtual HRESULT __stdcall ClassUnloadFinished(ClassID classID, HRESULT hrStatus);\n  virtual HRESULT __stdcall FunctionUnloadStarted(FunctionID functionID);\n  virtual HRESULT __stdcall JITCompilationStarted(FunctionID functionID, BOOL fIsSafeToBlock);\n  virtual HRESULT __stdcall JITCompilationFinished(FunctionID functionID, HRESULT hrStatus, BOOL fIsSafeToBlock);\n  virtual HRESULT __stdcall JITCachedFunctionSearchStarted(FunctionID functionID, BOOL* pbUseCachedFunction);\n  virtual HRESULT __stdcall JITCachedFunctionSearchFinished(FunctionID functionID, COR_PRF_JIT_CACHE result);\n  virtual HRESULT __stdcall JITFunctionPitched(FunctionID functionID);\n  virtual HRESULT __stdcall JITInlining(FunctionID callerID, FunctionID calleeID, BOOL* pfShouldInline);\n  virtual HRESULT __stdcall ThreadCreated(ThreadID threadID);\n  virtual HRESULT __stdcall ThreadDestroyed(ThreadID threadID);\n  virtual HRESULT __stdcall ThreadAssignedToOSThread(ThreadID managedThreadID, DWORD osThreadID);\n  virtual HRESULT __stdcall RemotingClientInvocationStarted();\n  virtual HRESULT __stdcall RemotingClientSendingMessage(GUID* pCookie, BOOL fIsAsync);\n  virtual HRESULT __stdcall RemotingClientReceivingReply(GUID* pCookie, BOOL fIsAsync);\n  virtual HRESULT __stdcall RemotingClientInvocationFinished();\n  virtual HRESULT __stdcall RemotingServerReceivingMessage(GUID* pCookie, BOOL fIsAsync);\n  virtual HRESULT __stdcall RemotingServerInvocationStarted();\n  virtual HRESULT __stdcall RemotingServerInvocationReturned();\n  virtual HRESULT __stdcall RemotingServerSendingReply(GUID* pCookie, BOOL fIsAsync);\n  virtual HRESULT __stdcall UnmanagedToManagedTransition(FunctionID functionID, COR_PRF_TRANSITION_REASON reason);\n  virtual HRESULT __stdcall ManagedToUnmanagedTransition(FunctionID functionID, COR_PRF_TRANSITION_REASON reason);\n  virtual HRESULT __stdcall RuntimeSuspendStarted(COR_PRF_SUSPEND_REASON suspendReason);\n  virtual HRESULT __stdcall RuntimeSuspendFinished();\n  virtual HRESULT __stdcall RuntimeSuspendAborted();\n  virtual HRESULT __stdcall RuntimeResumeStarted();\n  virtual HRESULT __stdcall RuntimeResumeFinished();\n  virtual HRESULT __stdcall RuntimeThreadSuspended(ThreadID threadid);\n  virtual HRESULT __stdcall RuntimeThreadResumed(ThreadID threadid);\n  virtual HRESULT __stdcall MovedReferences(ULONG cmovedObjectIDRanges, ObjectID oldObjectIDRangeStart[], ObjectID newObjectIDRangeStart[], ULONG cObjectIDRangeLength[]);\n  virtual HRESULT __stdcall ObjectAllocated(ObjectID objectID, ClassID classID);\n  virtual HRESULT __stdcall ObjectsAllocatedByClass(ULONG classCount, ClassID classIDs[], ULONG objects[]);\n  virtual HRESULT __stdcall ObjectReferences(ObjectID objectID, ClassID classID, ULONG cObjectRefs, ObjectID objectRefIDs[]);\n  virtual HRESULT __stdcall RootReferences(ULONG cRootRefs, ObjectID rootRefIDs[]);\n  virtual HRESULT __stdcall ExceptionThrown(ObjectID thrownObjectID);\n  virtual HRESULT __stdcall ExceptionSearchFunctionEnter(FunctionID functionID);\n  virtual HRESULT __stdcall ExceptionSearchFunctionLeave();\n  virtual HRESULT __stdcall ExceptionSearchFilterEnter(FunctionID functionID);\n  virtual HRESULT __stdcall ExceptionSearchFilterLeave();\n  virtual HRESULT __stdcall ExceptionSearchCatcherFound(FunctionID functionID);\n  virtual HRESULT __stdcall ExceptionCLRCatcherFound();\n  virtual HRESULT __stdcall ExceptionCLRCatcherExecute();\n  virtual HRESULT __stdcall ExceptionOSHandlerEnter(FunctionID functionID);\n  virtual HRESULT __stdcall ExceptionOSHandlerLeave(FunctionID functionID);\n  virtual HRESULT __stdcall ExceptionUnwindFunctionEnter(FunctionID functionID);\n  virtual HRESULT __stdcall ExceptionUnwindFunctionLeave();\n  virtual HRESULT __stdcall ExceptionUnwindFinallyEnter(FunctionID functionID);\n  virtual HRESULT __stdcall ExceptionUnwindFinallyLeave();\n  virtual HRESULT __stdcall ExceptionCatcherEnter(FunctionID functionID, ObjectID objectID);\n  virtual HRESULT __stdcall ExceptionCatcherLeave();\n  virtual HRESULT __stdcall COMClassicVTableCreated(ClassID wrappedClassID, REFGUID implementedIID, void* pVTable, ULONG cSlots);\n  virtual HRESULT __stdcall COMClassicVTableDestroyed(ClassID wrappedClassID, REFGUID implementedIID, void* pVTable);\n\n  // ICorProfilerCallback2 interface implementation\n  virtual HRESULT __stdcall ThreadNameChanged(ThreadID threadId, ULONG cchName, WCHAR name[]);\n  virtual HRESULT __stdcall GarbageCollectionStarted(int cGenerations, BOOL generationCollected[], COR_PRF_GC_REASON reason);\n  virtual HRESULT __stdcall SurvivingReferences(ULONG cSurvivingObjectIDRanges, ObjectID objectIDRangeStart[], ULONG cObjectIDRangeLength[]);\n  virtual HRESULT __stdcall GarbageCollectionFinished();\n  virtual HRESULT __stdcall FinalizeableObjectQueued(DWORD finalizerFlags, ObjectID objectID);\n  virtual HRESULT __stdcall RootReferences2(ULONG cRootRefs, ObjectID rootRefIds[], COR_PRF_GC_ROOT_KIND rootKinds[], COR_PRF_GC_ROOT_FLAGS rootFlags[], UINT_PTR rootIds[]);\n  virtual HRESULT __stdcall HandleCreated(GCHandleID handleId, ObjectID initialObjectId);\n  virtual HRESULT __stdcall HandleDestroyed(GCHandleID handleId);\n};\n\nOBJECT_ENTRY_AUTO(__uuidof(NetProfiler), ProfilerCallback)\n\n```\n\nVS will now warn you that it can't find `CLSID_Netprofiler`. To fix this, compile the project. This will generate two files (`DevToNetProfiler_i.c` and `DevToNetProfiler_i.h`). The first now contains the CLSID. \nNote the usage of `ICorProfilerCallback2` here. I tried to use only the first version of the interface but it failed. I was not able to attach it to any process. Maybe `ICorProfilerCallback` is too old for the current .NET framework versions. \n\n**Create `ProfilerCallback.cpp`** and add following content:\n```cpp\n// ./code/DevToNetProfiler/DevToNetProfiler/ProfilerCallback.cpp\n\n#include \"pch.h\"\n#include \"ProfilerCallback.h\"\n#include<iostream>\n\nProfilerCallback::ProfilerCallback() {\n  std::cout << \"constructor\";\n}\n\nHRESULT ProfilerCallback::FinalConstruct()\n{\n  return S_OK;\n}\n\nvoid ProfilerCallback::FinalRelease()\n{\n}\n\nHRESULT __stdcall ProfilerCallback::Initialize(IUnknown* pICorProfilerInfoUnk)\n{\n  std::cout << \"init\";\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::Shutdown()\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::AppDomainCreationStarted(AppDomainID appDomainID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::AppDomainCreationFinished(AppDomainID appDomainID, HRESULT hrStatus)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::AppDomainShutdownStarted(AppDomainID appDomainID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::AppDomainShutdownFinished(AppDomainID appDomainID, HRESULT hrStatus)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::AssemblyLoadStarted(AssemblyID assemblyID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::AssemblyLoadFinished(AssemblyID assemblyID, HRESULT hrStatus)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::AssemblyUnloadStarted(AssemblyID assemblyID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::AssemblyUnloadFinished(AssemblyID assemblyID, HRESULT hrStatus)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ModuleLoadStarted(ModuleID moduleID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ModuleLoadFinished(ModuleID moduleID, HRESULT hrStatus)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ModuleUnloadStarted(ModuleID moduleID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ModuleUnloadFinished(ModuleID moduleID, HRESULT hrStatus)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ModuleAttachedToAssembly(ModuleID moduleID, AssemblyID assemblyID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ClassLoadStarted(ClassID classID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ClassLoadFinished(ClassID classID, HRESULT hrStatus)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ClassUnloadStarted(ClassID classID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ClassUnloadFinished(ClassID classID, HRESULT hrStatus)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::FunctionUnloadStarted(FunctionID functionID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::JITCompilationStarted(FunctionID functionID, BOOL fIsSafeToBlock)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::JITCompilationFinished(FunctionID functionID, HRESULT hrStatus, BOOL fIsSafeToBlock)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::JITCachedFunctionSearchStarted(FunctionID functionID, BOOL* pbUseCachedFunction)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::JITCachedFunctionSearchFinished(FunctionID functionID, COR_PRF_JIT_CACHE result)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::JITFunctionPitched(FunctionID functionID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::JITInlining(FunctionID callerID, FunctionID calleeID, BOOL* pfShouldInline)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::UnmanagedToManagedTransition(FunctionID functionID, COR_PRF_TRANSITION_REASON reason)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ManagedToUnmanagedTransition(FunctionID functionID, COR_PRF_TRANSITION_REASON reason)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ThreadCreated(ThreadID threadID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ThreadDestroyed(ThreadID threadID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ThreadAssignedToOSThread(ThreadID managedThreadID, DWORD osThreadID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::RemotingClientInvocationStarted()\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::RemotingClientSendingMessage(GUID* pCookie, BOOL fIsAsync)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::RemotingClientReceivingReply(GUID* pCookie, BOOL fIsAsync)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::RemotingClientInvocationFinished()\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::RemotingServerReceivingMessage(GUID* pCookie, BOOL fIsAsync)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::RemotingServerInvocationStarted()\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::RemotingServerInvocationReturned()\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::RemotingServerSendingReply(GUID* pCookie, BOOL fIsAsync)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::RuntimeSuspendStarted(COR_PRF_SUSPEND_REASON suspendReason)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::RuntimeSuspendFinished()\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::RuntimeSuspendAborted()\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::RuntimeResumeStarted()\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::RuntimeResumeFinished()\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::RuntimeThreadSuspended(ThreadID threadID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::RuntimeThreadResumed(ThreadID threadID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::MovedReferences(ULONG cmovedObjectIDRanges, ObjectID oldObjectIDRangeStart[], ObjectID newObjectIDRangeStart[], ULONG cObjectIDRangeLength[])\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ObjectAllocated(ObjectID objectID, ClassID classID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ObjectsAllocatedByClass(ULONG classCount, ClassID classIDs[], ULONG objects[])\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ObjectReferences(ObjectID objectID, ClassID classID, ULONG objectRefs, ObjectID objectRefIDs[])\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::RootReferences(ULONG rootRefs, ObjectID rootRefIDs[])\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ExceptionThrown(ObjectID thrownObjectID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ExceptionUnwindFunctionEnter(FunctionID functionID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ExceptionUnwindFunctionLeave()\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ExceptionSearchFunctionEnter(FunctionID functionID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ExceptionSearchFunctionLeave()\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ExceptionSearchFilterEnter(FunctionID functionID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ExceptionSearchFilterLeave()\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ExceptionSearchCatcherFound(FunctionID functionID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ExceptionCLRCatcherFound()\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ExceptionCLRCatcherExecute()\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ExceptionOSHandlerEnter(FunctionID functionID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ExceptionOSHandlerLeave(FunctionID functionID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ExceptionUnwindFinallyEnter(FunctionID functionID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ExceptionUnwindFinallyLeave()\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ExceptionCatcherEnter(FunctionID functionID,\n  ObjectID objectID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ExceptionCatcherLeave()\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::COMClassicVTableCreated(ClassID wrappedClassID, REFGUID implementedIID, void* pVTable, ULONG cSlots)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::COMClassicVTableDestroyed(ClassID wrappedClassID, REFGUID implementedIID, void* pVTable)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::ThreadNameChanged(ThreadID threadID, ULONG cchName, WCHAR name[])\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::GarbageCollectionStarted(int cGenerations, BOOL generationCollected[], COR_PRF_GC_REASON reason)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::SurvivingReferences(ULONG cSurvivingObjectIDRanges, ObjectID objectIDRangeStart[], ULONG cObjectIDRangeLength[])\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::GarbageCollectionFinished()\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::FinalizeableObjectQueued(DWORD finalizerFlags, ObjectID objectID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::RootReferences2(ULONG cRootRefs, ObjectID rootRefIDs[], COR_PRF_GC_ROOT_KIND rootKinds[], COR_PRF_GC_ROOT_FLAGS rootFlags[], UINT_PTR rootIDs[])\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::HandleCreated(GCHandleID handleID, ObjectID initialObjectID)\n{\n  return S_OK;\n}\n\nHRESULT __stdcall ProfilerCallback::HandleDestroyed(GCHandleID handleID)\n{\n  return S_OK;\n}\n\n\n```\n\nPlease note both `cout` statements within `Initialize` and the `constructor`. We should see those strings if the profiler was loaded successfully.\n\n## Create C# test app\nNow add a simple C# console app and add `Console.Read()` to keep the console open.\n\n## Starting the app and loading the profiler\nHow does .NET know that it must load the profiler? Well you can register it globally in the registry. But I do not recommend that. Instead, use those four environment variables:\n\n```\nSET COR_ENABLE_PROFILING=1\nSET COR_PROFILER={b45048d5-6f44-4fbe-ae88-b468a5e4927a}\nSET COR_PROFILER_PATH=Debug/DevToNetProfiler.dll\nSET COMPLUS_ProfAPI_ProfilerCompatibilitySetting=EnableV2Profiler\n\nSTART TestApp/bin/Debug/TestApp.exe\n```\n\nThe first activates profiling, the second one passes the profiler ID. You can find it in the file `DevToNetProfiler.idl`. The third enables you to use `ICorProfilerCallback2` with .NET4. If you use the newest interface versions, that environment variable can be omitted. Save those lines as `start.bat` in the project root, execute it and you should get this result:\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/write-net-profiler/assets/first-run.jpg)\n\nAlso you can check the windows event log:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/write-net-profiler/assets/event-log-success.jpg)\n\n\n## A word about those many methods\nDon't be worried about those many functions. You just have to implement the interface thus you need to add those stubs here. Just ignore all of them that you do not need.\n\n# Summary\nOK. This was a lot of code. I will stop here and write another article for this series to keep the single posts very small. What have done so far? We created a profiler with just a minimum set of functionality. You can use this *template* from now on. I will also refer to it in the following articles.\nAnd again: Don't think about those ATL things. They are completely irrelevant.\n\nI see you in the next blog post when we are discussing how the profiler works.\n\nIf you haven't seen the download link yet: [The full runnable example is here](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/net-internals/write-net-profiler/code/DevToNetProfiler)\n\n# Additional Links\n[Profiling.doc by Microsoft, mirrored on a private server](http://blog.monstuff.com/archives/images/Profiling.pdf)\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":11,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--UOGqRORy--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/write-net-profiler/assets/header.jpg","tag_list":["dotnet","debug","tutorial","cpp"],"canonical_url":"https://dev.to/gabbersepp/create-a-net-profiler-with-the-profiling-api-start-of-an-unexpected-journey-198n","reading_time_minutes":11,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":322001,"title":"The impact of branch predictions in modern CPU architectures","description":"Have you already heard of `branch predictions`? They may have a high impact on algorithms working on big datasets.","published":true,"published_at":"2020-04-29T08:54:12.056Z","slug":"the-impact-of-branch-predictions-in-modern-cpu-architectures-45d3","path":"/gabbersepp/the-impact-of-branch-predictions-in-modern-cpu-architectures-45d3","url":"https://dev.to/gabbersepp/the-impact-of-branch-predictions-in-modern-cpu-architectures-45d3","comments_count":2,"public_reactions_count":9,"page_views_count":272,"published_timestamp":"2020-04-29T08:54:12Z","body_markdown":"---\npublished: true\ntitle: \"The impact of branch predictions in modern CPU architectures\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/impact-of-branch-predictions/assets/header.jpg\"\ndescription: \"Have you already heard of `branch predictions`? They may have a high impact on algorithms working on big datasets.\"\ntags: internals, performance, cpu, dotnet\nseries:\ncanonical_url:\n---\n\n# What are branch predictions?\nLet's say you are a taxi driver and you have to drive every day the same person to the same place. Every time the passenger asks you to turn left on a very big crossing. After a few days, you know that automatically. This will save you time because you can very early change the lane on the road. But what if the passenger suddenly asks you to turn right this time? Then you must \"revert\" your decision and change the lane again.\nThis is how branch predictions work. if the CPU detects a certain pattern within your `if` clauses, it will load the next commands into the memory. If the `if` evaluates to the expected result, this was a time saver because the expensive operation of loading something into the memory was already done. If the decision was wrong, the CPU had to load other instructions.\n\n# See this in action\nWell, nobody of us can have a look into a CPU and monitor when a prediction took place. At least I do not know those techniques. If you do, let me know!\n\nBut we can build a setup that should take advantage of branch predictions.\n\n>**Note:** You should compile the following C# code with the `Debug` profile to get exactly what we have written down. The `Release` build will optimize your code and thus have side effects. Read this short introduction if you want to know more about this:\n{% link https://dev.to/gabbersepp/differences-between-release-and-debug-build-assembler-code-included-52k6 %}\n\n```cs\n// ./code/Program.cs#L8-L69\n\nstatic void Main(string[] args)\n{\n    var sw = new Stopwatch();\n    sw.Start();\n    SameBranch();\n    sw.Stop();\n    var sameBranchTime = sw.ElapsedMilliseconds;\n\n    sw.Reset();\n    sw.Start();\n    DifferentBranch();\n    sw.Stop();\n    var differentBranchTime = sw.ElapsedMilliseconds;\n\n    Console.WriteLine($\"different-branches: {differentBranchTime}, same-branch: {sameBranchTime}\");\n    Console.Read();\n}\n\nstatic int DifferentBranch()\n{\n    int result = 0;\n\n    for (var i = 0; i < 1000000000; i++)\n    {\n        if (i > Random(0, 1000000000))\n        {\n            result = i;\n        }\n        else\n        {\n            result = i;\n        }\n    }\n\n    return result;\n}\n\nstatic int SameBranch()\n{\n    int result = 0;\n\n    for (var i = 1000000000; i < 2000000000; i++)\n    {\n        if (i > Random(0, 1000000000))\n        {\n            result = i;\n        }\n        else\n        {\n            result = i;\n        }\n    }\n\n    return result;\n}\n\nstatic Random random = new Random();\n\nstatic int Random(int from, int to)\n{\n    return random.Next(from, to);\n}\n```\n\n## How I expect `DifferentBranch` to work\n`SameBranch()` will generate a random number between zero and 1,000,000,000 and thus the number is always lower than `i`. This should force the CPU to use branch predictions and we should see a better performance then `DifferentBranch()`. There a number between 1,000,000,000 and 2,000,000,000 is chosen. If we assume that `Random.Next()` produces evenly distributed random numbers, we should see the branch to be true for half of the time. This should be enough to disturb the branch prediction and to produce a worse runtime as the other example.\n\n## Results\nI get these results for five runs of the text program:\n\n```\ndifferent-branches: 43745, same-branch: 39822\ndifferent-branches: 45647, same-branch: 41163\ndifferent-branches: 43938, same-branch: 39917\ndifferent-branches: 44935, same-branch: 41419\ndifferent-branches: 43378, same-branch: 39110\n```\n\nIn average the part with a successful branch prediction is about 10% faster than the other version.\n\n# Conclusions\nI don't think that this is something that you have to be worried about in your daily work except you are working on some critical algorithms. But nevertheless this is something that should be in your mind when developing a new algorithm for something.\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. ","positive_reactions_count":9,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--rctndb68--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/impact-of-branch-predictions/assets/header.jpg","tag_list":["internals","performance","cpu","dotnet"],"canonical_url":"https://dev.to/gabbersepp/the-impact-of-branch-predictions-in-modern-cpu-architectures-45d3","reading_time_minutes":3,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":316495,"title":"Call a C library from C++","description":"How can you write a DLL in C and use it in C++.","published":true,"published_at":"2020-04-22T06:03:42.224Z","slug":"call-a-c-library-from-c-3026","path":"/gabbersepp/call-a-c-library-from-c-3026","url":"https://dev.to/gabbersepp/call-a-c-library-from-c-3026","comments_count":3,"public_reactions_count":9,"page_views_count":2167,"published_timestamp":"2020-04-22T06:03:42Z","body_markdown":"---\npublished: true\ntitle: \"Call a C library from C++\"\ndescription: \"How can you write a DLL in C and use it in C++.\"\ntags: c, cpp, library, beginner\nseries:\ncanonical_url:\n---\n\nYesterday I needed to write a small C DLL and use it in my C++ sample application. It took some time to figure out how I must do this on my Windows PC with Visual Studio installed. \nThis is just a little reminder for me, so don't expect too much :-).\n\n# C code\nThe C app contains just a little function:\n\n```c\n// ./code/c/lib.c\n\n#include <stdio.h>\n\n__declspec(dllexport) void f()\n{\n    printf(\"\\n This is a C code\\n\");\n}\n```\n\nThe keyword `__declspec(dllexport)` is only valid within the Microsoft compiler world and exports that function.\n\n# Compile C\nOpen the Visual Studio Developer Command Prompt and navigate to the folder, where the C project is. Then simply type: `cl /LD lib.c`. This will create two files. A `lib.lib` and a `lib.dll`.\n\n# C++ Code\nAlso nothing special. First we need the header file:\n```cpp\n// ./code/cpp/Console/Console/Header.h\n\n#pragma once\n\nextern \"C\" {\n  __declspec(dllimport) void f();\n}\n\n```\nYou find `declspec` again, but this time it is specified with `dllimport` which makes perfectly sense as we are importing our function :-)\n\nOur app:\n```cpp\n// ./code/cpp/Console/Console/Console.cpp\n\n#include <iostream>\n#include \"Header.h\"\n#pragma comment(lib, \"../../../c/lib.lib\")\n\nint main()\n{\n  f();\n}\n\n```\n\nNote the line `#pragma comment(lib, \"../../../c/lib.lib\")` which specifies the location of the `.lib` so the linker is able to reference the function `f()`.\n\n# Execute\nIf you now execute `Console.exe` you will get an error because the `dll` can not be find. To fix this, just copy the `lib.dll` to the folder where `Console.exe` is.\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":9,"cover_image":null,"tag_list":["c","cpp","library","beginners"],"canonical_url":"https://dev.to/gabbersepp/call-a-c-library-from-c-3026","reading_time_minutes":2,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":315233,"title":"How to debug an unmanaged application with WinDbg","description":"WinDbg is a nice tool if you like to debug an application but can not use your favorite IDE for that. I will show you how to debug a simple (unmanaged!) console app.","published":true,"published_at":"2020-04-20T20:17:26.023Z","slug":"how-to-debug-an-unmanaged-application-with-windbg-2j23","path":"/gabbersepp/how-to-debug-an-unmanaged-application-with-windbg-2j23","url":"https://dev.to/gabbersepp/how-to-debug-an-unmanaged-application-with-windbg-2j23","comments_count":0,"public_reactions_count":4,"page_views_count":1822,"published_timestamp":"2020-04-20T20:17:26Z","body_markdown":"---\npublished: true\ntitle: \"How to debug an unmanaged application with WinDbg\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-to-debug-with-windbg/assets/header.jpg\"\ndescription: \"WinDbg is a nice tool if you like to debug an application but can not use your favorite IDE for that. I will show you how to debug a simple (unmanaged!) console app.\"\ntags: clr,debug,internals,windbg\nseries: WinDbg\ncanonical_url:\n---\n\n# Why use WinDbg if I have Visual Studio with a more user friendly debugger?\nThere are a few situations where this is necessary. At work we are developing a ASP.NET WebAPI. In the production environment you can not attach your Visual Studio to debug or analyze the memory. The latter is also a reason, you should make your familiar with WinDbg. It allows (of course as other tools, too) to analyze a memory dump, taken from any process.\n\nDuring my spare time the last week I started to write a .NET profiler with C++. This is a small DLL that is loaded along with a normal .NET application and allows you to monitor your .NET application. For example you get notifications if a  class loads and so on. To debug that DLL I had to use WinDbg.\n\n# Get WinDbg\nYou can get WinDbg from [here](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools).\n\n# Our sample app\nI created a very stupid C++ application. Follow [this link](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/net-internals/how-to-debug-with-windbg/project) to get the full runnable example. [Here](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/net-internals/how-to-debug-with-windbg/exe) you get the compiled example. It consists of a class `Program`:\n\n```cpp\n// ./project/ConsoleApplication1/Program.cpp\n\n#include \"Program.h\";\n\nProgram::Program(int id) {\n\tthis->id = id;\n}\nint Program::GetId() {\n\treturn id;\n}\n```\n\nAnd a file that contains the entry point:\n\n```cpp\n// ./project/ConsoleApplication1/ConsoleApplication1.cpp\n\n#include <iostream>\n#include \"Program.h\";\n\nint main()\n{\n    Program* pProgram = new Program(10);\n    int dummy = 0;\n    std::cout << \"Press Enter to continue\\n\";\n    std::cin >> dummy;\n    std::cout << \"Hello World!\\n\";\n    std::cout << pProgram->GetId();\n    return 0;\n}\n```\n\n# Use WinDbg\nFirst you should start the programm. Then open the task manager, find the process and copy the `PID` (in this example: `24508`):\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-to-debug-with-windbg/assets/find-program.jpg)\n\n## Provide symbols\nYou should tell WinDbg where it can find the symbols of the system libraries. Go to `File > Symbol File Path` and insert:\n\n```\nsrv*C:\\MySymbolCache*http://msdl.microsoft.com/download/symbols\n```\n\nThis will download all microsoft symbols to `c:/MySymbolCache`. \n\n**The symbols of your app**\nSometimes WinDbg finds the symbols of the attached process automatically but not always. In the latter case, just copy the `ConsoleApplication1.pdb` file to `c:/MySymbolCache`. \n\n## Attach to the process\nGo to `File > Attach to a process`, insert the `PID` at the bottom of the dialog and press `OK`.\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-to-debug-with-windbg/assets/attach.jpg)\n\nIf you get this view, everything works as expected:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-to-debug-with-windbg/assets/attahced.jpg)\n\nWinDbg has now paused the program.\n\n## Set a breakpoint\nWinDbg provides three commands for placing breakpoints:\n\n+ **bp**: Set a breakpoint\n+ **bu**: Set a unresolved breakpoint\n+ **bm**: Set breakpoints to symbols that match a pattern\n\n### bp: Set a breakpoint\nThis is the \"normal\" way of placing a breakpoint. You specify the name of the application, followed by a exclamation mark and the path to the function name.\n\n```\nbp ConsoleApplication1!Program::GetId\n```\n\nIf you get no error message (the `invalid checksum` can be ignored), you successfully  placed a breakpoint:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-to-debug-with-windbg/assets/bp-1.jpg)\n\n### Deleting a breakpoint\nGo to `Edit > Breakpoints...` to get a list of all placed breakpoints. In this window you also can delete them.\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-to-debug-with-windbg/assets/breakpoints-view.jpg)\n\n### bu: Deferred breakpoint\nTry this command:\n\n```\nbp NonExistingApp!Program::NonExistingFunction\n``` \n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-to-debug-with-windbg/assets/bp-non-existing.jpg)\n\nObviously this function does not exist. Also the application name is wrong. What WinDbg now creates is a so called `deferred breakpoint`:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-to-debug-with-windbg/assets/bp-defered.jpg)\n\nA `deferred` or `unresolved` breakpoint is one that gets active as soon as the module `NonExistingApp` is loaded. If you use `bp` and specify a location that does not exist currently, then `bp` does the same as `bu`.\n\n### bm: Set breakpoints to symbols that match a pattern\nYou also can specify a set of breakpoints by passing a pattern:\n\n```\nbm ConsoleApplication1!Program::*\n```\n\nThis theoretically will place a breakpoint in all entry points that match that pattern. But during testing this command does  nothing. So I am not sure how to use this properly :-)\n\n### Setting our breakpoint\nFor testing purposes we use `bp` as mentioned above:\n\n```\nbp ConsoleApplication1!Program::GetId\n```\n\n## Let the app run\nAs now WinDbg is attached and the breakpoint is set, we can continue. insert `g` into the WinDbg commandline and press enter. `g` continues the execution of `ConsoleApplication1`. Press any `key + enter` in the `ConsoleApplication1.exe` cmd. Now the application is paused and you should see this:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-to-debug-with-windbg/assets/windbg-hit.jpg)\n\nAlso notice the red underlined buttons at the top. With those buttons you can jump through the source code. You are also able to set the cursor into any line and press `F9` to set a new breakpoint in this line.\n\n## Read local variables and manipulate them\nPress `F10` or one of the first two buttons to jump into the next line. The instruction pointer now is in line `return id;`. Go to `View > Locals` to open a new window with all local variables:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-to-debug-with-windbg/assets/local-vars.jpg)\n\nLet's say you want to return `5000` here. That is easy. Execute the command `?? id = 5000`:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-to-debug-with-windbg/assets/set-var.jpg)\n\nNotice how the variable has changed:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-to-debug-with-windbg/assets/var-canged.jpg)\n\n# Summary\nI showed you how you can easily debug your unmanaged application with WinDbg. I recommend you to make yourself familiar with WinDbg. It is a very powerful tool. Please keep in mind that for debugging a .NET application, you need some extra steps.\n\n----\n\n# More information\n[Breakpoint Commands](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/bp--bu--bm--set-breakpoint-)\n[WinDbg Cheatsheet](https://theartofdev.com/windbg-cheat-sheet/)\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":4,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--B6FKSgGR--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/net-internals/how-to-debug-with-windbg/assets/header.jpg","tag_list":["clr","debug","internals","windbg"],"canonical_url":"https://dev.to/gabbersepp/how-to-debug-an-unmanaged-application-with-windbg-2j23","reading_time_minutes":5,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":275637,"title":"Why I made 29 PR's in the repository of 11ty's documentation","description":"Why I made 29 PR's in the repository of 11ty's documentation","published":true,"published_at":"2020-03-06T16:33:22.555Z","slug":"why-i-made-29-pr-s-in-the-repository-of-11ty-s-documentation-4k94","path":"/gabbersepp/why-i-made-29-pr-s-in-the-repository-of-11ty-s-documentation-4k94","url":"https://dev.to/gabbersepp/why-i-made-29-pr-s-in-the-repository-of-11ty-s-documentation-4k94","comments_count":2,"public_reactions_count":12,"page_views_count":146,"published_timestamp":"2020-03-06T16:33:22Z","body_markdown":"---\npublished: true\ntitle: \"Why I made 29 PR's in the repository of 11ty's documentation\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/pr-11ty-website/assets/header.jpg\"\ndescription: \"Why I made 29 PR's in the repository of 11ty's documentation\"\nseries:\ntags: beginners,opensource,productivity,eleventy\ncanonical_url:\n---\n\nDuring the last three weeks I made 29 pull requests in the repository of [https://github.com/11ty/11ty-website](https://github.com/11ty/11ty-website):\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/pr-11ty-website/assets/stats.jpg)\n\nI also read through many issues and added a comment if I was sure that the issue can be closed. A collegue of mine asked me why I am doing this. He would not want to spend time for that because he had so much other own projects to maintain.\n\n# Please support your favorite open source projects\n\nI tried `11ty` about four or six weeks ago and I falled in love at the first sight. It is so easy to use with so many possibilities. Currently I have build two websites with eleventy. \n\nMy personal portfolio page where I aggregate everything I do into one place:\n\n{% github gabbersepp/biehler-josef.de %}\n\nAnd a german page that publishes cartoons with developer background:\n\n{% github gabbersepp/kack_dev %}\n\nThe owner of that repository invested many time into this neat tool and into the documentation also. And all that stuff helped me a lot. I am happy to be able to give something back to the owner and I ask you to do the same with your favorite open source project. Every line of code helps.\n\nIn this case the only thing I have done was to add new JSON files like that one:\n\n```json\n{\n\t\"url\": \"https://kack.dev\",\n\t\"name\": \"KackDev\",\n\t\"description\": \"Cartoons from the life of a developer.\",\n\t\"twitter\": \"KackDev\",\n\t\"source_url\": \"https://github.com/gabbersepp/kack_dev\"\n}\n```\n\nThey are used to build the list of pages that are [built with eleventy](https://www.11ty.dev/docs/sites/). There were about 50 issues that aimed to add a new site. About 20 issues were obsolete because the site they are about have been added i former committs. And for the remaining 30 issues I have created pull requests.\n\nYou might think that this is stupid work with no intellectual claim. And you are right. But there is one fact that counts: **It costs time to implement all those issues**.\n\nTime the owner maybe does not have. So if you have some time and you see some issues that you can solve, please try it.\n\nWhat do you think? How much time do you spend at open source projects?\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":12,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--cizZnbK7--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/pr-11ty-website/assets/header.jpg","tag_list":["beginners","opensource","productivity","eleventy"],"canonical_url":"https://dev.to/gabbersepp/why-i-made-29-pr-s-in-the-repository-of-11ty-s-documentation-4k94","reading_time_minutes":2,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":270799,"title":"Differences between Release and Debug build [assembler code included]","description":"If you ever want to investigate performance issues under the hood you should be aware of the differences between release and debug profile.","published":true,"published_at":"2020-02-28T18:33:30.588Z","slug":"differences-between-release-and-debug-build-assembler-code-included-52k6","path":"/gabbersepp/differences-between-release-and-debug-build-assembler-code-included-52k6","url":"https://dev.to/gabbersepp/differences-between-release-and-debug-build-assembler-code-included-52k6","comments_count":5,"public_reactions_count":7,"page_views_count":420,"published_timestamp":"2020-02-28T18:33:30Z","body_markdown":"---\npublished: true\ntitle: \"Differences between Release and Debug build [assembler code included]\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/analyzing-performance-trap/assets/header.jpg\"\ndescription: \"If you ever want to investigate performance issues under the hood you should be aware of the differences between release and debug profile.\"\ntags: csharp, performance, assembler, debug\nseries:\ncanonical_url:\n---\n\nA few days ago I stumbled across a performance issue in our app. It is written in C# and compiled against .NET 4.7.2. After doing some investigation I wanted to take a deeper look into the implicit array bounds checks of .NET. \n\n>If you want to read more about my process of analyzing that stuff, stay tuned! I will write more about it in a few days!\n\nSo I tried to reproduce that behavior in a very small console app but did not succeed. The key here was the optimizations that were done by the JIT compiler.\n\n# Implicit array bounds checks\nConsider this example:\n\n```cs\n1: var array = new int[10];\n2: array[20] = 1;\n```\n\nWhat will happen? An `IndexOutOfRange` exception will be thrown. This is possible because .NET ensures that the index is lower then the size of the array. Of course that check costs time so I wanted to know if I would be able to omit those checks.\n\nI put a breakpoint at line 2, switched to the `Release` profile and started debugging.\n\n>**Note:** The reasons for that and how you can get the `ASM` code is something I will show in a subsequent blog post.\n\nI expected the runtime to stop at position 2 but what really happened:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/analyzing-performance-trap/assets/img1.jpg)\n\nMy breakpoint was skipped and I first I did not know why this happens.\n\n# Debugging in Release mode\n\nWell, this is possible. VS will warn you but you can continue debugging, though.\n\nConsider this example:\n\n```cs\nstatic void Main(string[] args)\n{\n    Console.Write(5);\n}\n```\n\nThe breakpoint is hit event though I am in a release build.\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/analyzing-performance-trap/assets/img2.jpg)\n\n# Another example\n\nFirst I thought this has something to do with the array bounds violation so I tried this one:\n\n```cs\n1: static void Main(string[] args)\n2: {\n3:    var asd = new int[10];\n4:    asd[2] = 1;\n5:    Console.Write(asd[2]);\n6:}\n```\n\nI placed a breakpoint at line 5 and was sure that this time my breakpoint must be hit. But no. I started the program and it closes immediately. Very disappointing.\n\n# Next try\n\n```cs\nstatic void Main(string[] args)\n{\n    var asd = new int[10];\n    asd[2] = 1;\n    Console.Write(asd[2]);\n    Console.Read();\n}\n```\n\nI added `Console.Read()`. Now the console must keep open. So I would be able to pause the execution and take a look at the `ASM` code. And I was right. The `Read()` forces the console to keep open. I press the `pause` button and the execution stopped. Finally I was in the debug mode and could take a look at the ASM code:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/analyzing-performance-trap/assets/asm.jpg)\n\nWhat is happening here:\n+ **Line 5** executes the `new` operator. It's result (memory address of the array) is stored in the `EAX` register (mostly `EAX` is used for returning values)\n+ **Line 6** inserts `1` into the memory. The address is in `EAX`. Every managed object in .NET has some metadata. In this case the first 8 bytes are reserved for metadata. Position `0` in the array would be `[eax + 8]`, position `1` = `[eax + 12]` and our requested index `2` = `[eax + 16]`. This depends on your CPU architecture of course.\n+ **Line 7-8** executes `Console.Write`\n\nMaybe you noticed the abstinence of our local variable `asd`? Also if you are not familiar with ASM code, you should realize that no local variables are involved here. And that is exactly the reason why the breakpoint was never hit. The JIT compiler understood that the local variable was not really necessary, omitted it and held the reference to the array in the register `EAX` all the time. Visual Studio now was not able anymore to map the executed code back to our source code and thus no breakpoint was hit.\n\n# The same in debug mode\nWhen you start your code in debug mode, you expect that the code does exactly what you have written. Visual Studio knows this and does no optimizations in the debug mode. This leads to local variables that are not necessary and so on.\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/analyzing-performance-trap/assets/debug.jpg)\n\n# Analyzing the same example at IL level (Update 05.03)\n\nOptimizations are done at two levels. At IL Code level (C# -> .exe) and at machine code level (.exe -> RAM). We have taken a look at the latter here because I wanted to introduce you into that topic to make it easier to understand my following blog post that takes a deeper look.\n\nOf course, the local variable `asd` was already removed during IL Code generation. Let's look at the IL code of that example in both, release and debug build:\n\n```cs\nstatic void Main(string[] args)\n{\n    var asd = new int[10];\n    asd[2] = 1;\n    Console.Write(asd[2]);\n    Console.Read();\n}\n```\n\nDebug Build:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/analyzing-performance-trap/assets/il-debug.jpg)\n\nRelease:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/analyzing-performance-trap/assets/il-release.jpg)\n\nAs you can see, the local variable is missing already.\n\n# Conclusion\n\nThis simple example shows that the JIT compiler is clever enough to detect and avoid unnecessary code. But it also will make performance measurements more difficult. Just think about what would have happened if you have a more complex example with more local variables in a loop or something else. You get completely wrong results if you were taking performance measures in debug mode!\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":7,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--alJxJ0Tl--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/analyzing-performance-trap/assets/header.jpg","tag_list":["csharp","performance","assembler","debug"],"canonical_url":"https://dev.to/gabbersepp/differences-between-release-and-debug-build-assembler-code-included-52k6","reading_time_minutes":4,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":267329,"title":"Add pagination for dynamic data in Eleventy","description":"Creating pagination from dynamic data and add a useful navigation bar","published":true,"published_at":"2020-02-24T08:27:26.453Z","slug":"add-pagination-for-dynamic-data-in-eleventy-5fk9","path":"/gabbersepp/add-pagination-for-dynamic-data-in-eleventy-5fk9","url":"https://dev.to/gabbersepp/add-pagination-for-dynamic-data-in-eleventy-5fk9","comments_count":7,"public_reactions_count":11,"page_views_count":1711,"published_timestamp":"2020-02-24T08:27:26Z","body_markdown":"---\npublished: true\ntitle: \"Add pagination for dynamic data in Eleventy\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/eleventy-create-pagination/assets/header.png\"\ndescription: \"Creating pagination from dynamic data and add a useful navigation bar\"\ntags: eleventy, javascript, blog, tutorial\nseries: creating_private_page\ncanonical_url:\n---\n\n`Eleventy` has a nice feature for creating a pagination with ease. Continue reading if you want to break your single page with many items into many pages with only few items.\n\n# Setup\n\nWe simulate a asynchronous request that fetches many data from a server. To add a new collection in `eleventy` you have to provide a configuration file (`.eleventy.js`) and call `eleventyConfig.addCollection`:\n\n```js\n// project/.eleventy.js\n\n\nmodule.exports = function(eleventyConfig) {\n  eleventyConfig.addCollection(\"manyData\", async () =>\n    new Promise(resolve => {\n      const results = [];\n      for(var i = 0; i < 100; i++) {\n        results.push({\n          id: i,\n          text: `item ${i}`\n        });\n      }\n      resolve(results);\n    })\n  );\n\n  return {\n    dir: {\n      input: \"./views\"\n    }\n  }\n}\n\n```\n\nThe `addCollection` function accepts a function as parameter that must return an array with data. If you return a `Promise` `eleventy` will wait until it resolves.\n\n# How it works\n\nYou need a `frontmatter` header that defines the collection, the size of each sub collection and some other stuff. \n\n<!-- embedme project/views/index.njk#L1-L6 -->\n```md\n---\npagination:\n  data: collections.manyData\n  size: 2\n  reverse: true\n---\n```\n\nAs you can see, I am reversing the collection here. In this simple example, this is not very useful because I would be able to reverse the collection in the `.eleventy.js` config, too. In a subsequent blog post you will see why you might need this stuff.\n\nTo iterate over the subcollection, `eleventy` provides you the `pagination` object that contains a property named `items`. It can be used as any other collection.\n\n<!-- embedme project/views/index.njk#L8-L10 -->\n```html\n{%- for item in pagination.items %}\n    <div style=\"background-color: red; margin: 10px; width: 100px;\">{{ item.text }}</div>\n{% endfor -%}\n```\n\nResult:\n\n![result](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/eleventy-create-pagination/assets/first-result.jpg)\n\n# Simple Navigation\n\nThe best pagination is worth nothing without a possibility to jump to the next page. `Eleventy` has a [very good documentation](https://www.11ty.dev/docs/pagination/nav/) about it. A very simple navigation consists of two arrows:\n\n<!-- embedme project/views/index.njk#L12-L18 -->\n```html\n{% if pagination.href.previous %}\n    <span><a href=\"{{ pagination.href.previous }}\">&lt;</a></span>\n{% endif %}\n\n{% if pagination.href.next %}\n    <span><a href=\"{{ pagination.href.next }}\">&gt;</a></span>\n{% endif %}\n```\n\nResult:\n\n![Result](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/eleventy-create-pagination/assets/second-result.jpg)\n\n# Summary \n\nPagination done easily! You learned some basics about pagination in `eleventy`. Next time I show you how you can create a more sophisticated navigation bar.\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":11,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--Htcsqpx---/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/eleventy-create-pagination/assets/header.png","tag_list":["eleventy","javascript","blog","tutorial"],"canonical_url":"https://dev.to/gabbersepp/add-pagination-for-dynamic-data-in-eleventy-5fk9","reading_time_minutes":2,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":265628,"title":"Share a post on several social media platforms with IFTTT","description":"Learn how to publish an image once and share it in your business and private social media profiles. Control Facebook, Twitter and Instagram with IFTTT","published":true,"published_at":"2020-02-20T22:00:39.995Z","slug":"share-a-post-on-several-social-media-platforms-with-ifttt-3f45","path":"/gabbersepp/share-a-post-on-several-social-media-platforms-with-ifttt-3f45","url":"https://dev.to/gabbersepp/share-a-post-on-several-social-media-platforms-with-ifttt-3f45","comments_count":0,"public_reactions_count":8,"page_views_count":1191,"published_timestamp":"2020-02-20T22:00:39Z","body_markdown":"---\npublished: true\ntitle: \"Share a post on several social media platforms with IFTTT\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/share-on-social-media/assets/header.jpg\"\ndescription: \"Learn how to publish an image once and share it in your business and private social media profiles. Control Facebook, Twitter and Instagram with IFTTT\"\ntags: social, ifttt, blog, productivity\nseries:\ncanonical_url:\n---\n\nIn my spare time I'm drawing cartoons. After finishing one, I want to publish them on several social media platforms:\n\n+ Facebook\n+ Instagram\n+ Twitter\n\nOn every platform I have a personal profile where I publish everything and a profile for cartoons related to developer topics.\n\nMy workflow currently is:\n+ Publish the post at [the KackDev Instagram account](https://www.instagram.com/kackdev)\n+ Publish the same at [the KackDev Twitter account](https://twitter.com/KackDev)\n+ Publish the same at [the KackDev Facebook page](https://www.facebook.com/KackDev/)\n+ Repost the twitter post to [my twitter account](https://twitter.com/JosefBiehler)\n+ Repost it in my story at [my private Instagram account](https://www.instagram.com/josefbiehler)\n+ Publish the post at [my private Instagram account](https://www.instagram.com/josefbiehler)\n+ Publish the post at [my private Facebook profile](https://www.facebook.com/KackDev)\n\nWow! Many steps that has to be done manually before I can annoy everyone with my bad drawings! \n\nI was asking myself if this can't be automated. Of course this is possible to some degree. I do not know if this can be done more efficient. Let me know!\n\n# IFTTT\n[**I**f **t**his **t**han **t**hat](https://ifttt.com) is a service where you can define workflows based upon start actions. E.g. \"if I receive an email from xxx then send one to yyyy\" and stuff like that.\n\nIt also provides Twitter, Instagram and Facebook integration. And it is free!\n\n**Accounts**\n\n`IFTTT` allows only one Twitter/Instagram/Facebook connection per IFTTT account. As we want to control two social media profiles per platform, we need two `IFTTT` accounts. In this blog post I use the term `private IFTTT account` for that one that is connected to my private social media profiles. Accordingly I call my account that is linked to my `KackDev` social media profiles `KackDev IFTTT account`.\n\n# Publishing to KackDev@Instagram\nI use `Planoly` for this task. But it is not required. `Planoly` allows me in the free tier to maintain one Instagram account and to create many hashtag sets. The later is the reason why I fall back on a third party tool. I do not want to search the hashtags manually all the time I make a post.\n\n# Publishing to KackDev@Twitter\nNow I need a `Instagram <-> Twitter` integration in my KackDev IFTTT account. Luckily someone has published such an applet at `IFTTT`.\n\n## Small IFTTT excurse\nIf you are new to IFTTT, your start screen will look like this:\n\n![Startscreen](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/share-on-social-media/assets/ifttt-1.jpg)\n\nKlick onto the magnifying glass at the top and type in \"twitter\". You will see many results.\n\n![Results](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/share-on-social-media/assets/ifttt-2.jpg)\n\nWe are interested in the second applet \"Tweet your Instagrams as native photos on Twitter\". Click onto it. Press the big \"Connect\" Toggle. Now `IFTTT` will redirect you to Instagram which will ask you to authorize `IFTTT`. In my case I link  my KackDev Instagram account with my KackDev IFTTT account. Now You will be redirected to IFTTT which then redirects you to Twitter. Here I link my KackDev Twitter account.\n\nIf you see following screen, everything works as expected:\n\n![finished](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/share-on-social-media/assets/ifttt-3.jpg)\n\n## Finishing the integration\nWell, nothing more has to be done. I have activated the applet, linked both social media accounts to my KackDev IFTTT account.\n\n# Publish to KackDev@Facebook page\nThis one is easy. I go to my KackDev IFTTT account and search for \"Facebook\":\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/share-on-social-media/assets/ifttt-4.jpg)\n\nClick onto the applet \"Post your Instagram photos to a Facebook page\". Again IFTTT asks you to authenticate - this time against Facebook. In the next step you select the Facebook page.\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/share-on-social-media/assets/ifttt-5.jpg)\n\n# Sharing the post in your private social media profiles\nWhat you have until now:\n+ Create one post at Instagram\n+ automatically create a tweet\n+ automatically create a post in your Facebook page\n\nFollowing steps are missing, yet:\n+ Repost the twitter post\n+ Repost the Instagram in my private Instagram story\n+ Publish the post at my private Instagram account\n+ Publish the post at Facebook\n\n## Repost the tweet in my @JosefBiehler twitter account\nThis is a bit more tricky. Twitter does not allow to define an applet that can retweet tweets of specific user. This can be solved by several ways. I prefer to write a small microservice that is triggered by IFTTT. You have to create or reuse existing tokens of your twitter developer account.\n\n```js\nconst Twitter = require(\"twitter-lite\");\nconst express = require(\"express\");\nrequire(\"./envvars\");\n\nfunction retweet(id, TWTR_CKEY, TWTR_CSECRET, TWTR_ATOKEN, TWTR_ASECRET) {\n    const client = new Twitter({\n        subdomain: \"api\",\n        consumer_key: TWTR_CKEY,\n        consumer_secret: TWTR_CSECRET,\n        access_token_key: TWTR_ATOKEN,\n        access_token_secret: TWTR_ASECRET\n    });\n\n    return client.post(\"statuses/retweet/\" + id);\n}\n\nvar app = express();\napp.get(\"/\", async (req, res) => {\n    console.log(\"new request\");\n    const link = req.query.link;\n    console.log(\"link: \" + link);\n    const id = link.match(/.*\\/([0-9]{6,})/)[1];\n    console.log(\"id: \" + id);\n\n    const secret = req.query.secret.trim();\n\n    if (process.env.SECRET.indexOf(secret) <= -1) {\n        console.log(\"wrong secret\");\n        res.sendStatus(401);\n        return;\n    }\n\n    try {\n        const result = await retweet(id, process.env.TWTR_CKEY, process.env.TWTR_CSECRET, process.env.TWTR_ATOKEN, process.env.TWTR_ASECRET);\n        res.sendStatus(200);\n    } catch(e) {\n        console.log(JSON.stringify(e))\n        res.sendStatus(500);\n    }\n});\n\napp.listen(44320, () => console.log(\"listening on port 44320\"));\n```\n\nThe service is quite simple. It just accepts a `GET` request, containing the Tweeturl and a secret key as query parameter. From the URL the tweet ID is extracted and used to send the retweet request. Log in into your private IFTTT account, go to [platform.ifttt.com](https://platform.ifttt.com) and find the button to create a new applet:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/share-on-social-media/assets/ifttt-platform-1.jpg)\n\n>**Note**: Users in the free tier on IFTTT can create applets for free but they can not publish them to other users.\n\nCreate an applet with Twitter as Trigger and a Webhook as Action:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/share-on-social-media/assets/ifttt-platform-2.jpg)\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/share-on-social-media/assets/ifttt-platform-3.jpg)\n\nAs `value` for the `URL` field in the webhook, you choose something like that:\n`http://link-to-your-service/?link={{LinkToTweet}}&secret=a_secret`\n\nAfter saving it, you can view it in your private IFTTT account by clicking this icon:\n\n![](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/share-on-social-media/assets/ifttt-platform-4.jpg)\n\nIf you click onto it, you are redirected to IFTTT and you can connect that applet to your account. During this process you will have to connect your private twitter profile with your IFTTT account if you haven't done that yet.\n\n**Result:**\n\nFrom now on every tweet from @KackDev is retweeted to my private twitter account.\n\n## Reposting the post to my private FB & Instagram account\n\nWell, due to breaking changes in the Facebook & Instagram API, no one is able to post to private FB and Instagram accounts anymore. That means I have to post it to my private Instagram account manually. Also the post on the Facebook page must be reposted manually.\n\nIf you have an idea how this can be solved, let me know :-)\n\n# Summary\n\nI showed you how I utilize `IFTTT` to spread a post at my business Instagram account to other platforms. This reduces the effort for maintaining social media accounts. Also you may got an idea what is possible with `IFTTT`.\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":8,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--vIzLDDhj--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/share-on-social-media/assets/header.jpg","tag_list":["social","ifttt","blog","productivity"],"canonical_url":"https://dev.to/gabbersepp/share-a-post-on-several-social-media-platforms-with-ifttt-3f45","reading_time_minutes":6,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":262454,"title":"The suffering of the young Herbert","description":"The suffering of the young Herbert","published":true,"published_at":"2020-02-16T10:26:28.627Z","slug":"the-suffering-of-the-young-herbert-35kb","path":"/gabbersepp/the-suffering-of-the-young-herbert-35kb","url":"https://dev.to/gabbersepp/the-suffering-of-the-young-herbert-35kb","comments_count":1,"public_reactions_count":5,"page_views_count":110,"published_timestamp":"2020-02-16T10:26:28Z","body_markdown":"---\npublished: true\ntitle: \"The suffering of the young Herbert\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/comics/herbert-birthday/assets/1228974339942420480.jpg\"\ndescription: \"The suffering of the young Herbert\"\ntags: humor, comic, php, cartoon\nseries: comics\ncanonical_url:\n---\n\nFrom time to time I am drawing cartoons with relation to our beloved programming doings. I am publishing them here, too. Have fun! Most of them will be in German but I am posting the english translation, too.\nThe main character in my developer cartoons is `Herbert`.\n\n----\n\n**The suffering of the young Herbert**\n\n![Herberts birthday gift](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/comics/herbert-birthday/assets/1228974339942420480.jpg)\n\nHerbert got a `PHP` book for his birthday. Maybe not the best idea.\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":5,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s---R_wiDIt--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/comics/herbert-birthday/assets/1228974339942420480.jpg","tag_list":["humor","comic","php","cartoon"],"canonical_url":"https://dev.to/gabbersepp/the-suffering-of-the-young-herbert-35kb","reading_time_minutes":1,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":253153,"title":"Eleventy basics you might need for creating a generic design","description":"Before creating the final structure of the design I show you how to handle some basic use cases with eleventy.","published":true,"published_at":"2020-02-02T18:20:19.394Z","slug":"eleventy-basics-you-might-need-for-creating-a-generic-design-2679","path":"/gabbersepp/eleventy-basics-you-might-need-for-creating-a-generic-design-2679","url":"https://dev.to/gabbersepp/eleventy-basics-you-might-need-for-creating-a-generic-design-2679","comments_count":1,"public_reactions_count":15,"page_views_count":1082,"published_timestamp":"2020-02-02T18:20:19Z","body_markdown":"---\npublished: true\ntitle: \"Eleventy basics you might need for creating a generic design\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/eleventy-design/assets/header.png\"\ndescription: \"Before creating the final structure of the design I show you how to handle some basic use cases with eleventy.\"\ntags: eleventy, website, portfolio, design\nseries: creating_private_page\ncanonical_url:\n---\n\nIn the last articles I showed you how you can fetch tweets and their images and display them within your `eleventy` page. Also I modified my build process to upload the files through a HTTP upload endpoint.\n\nIn this article I show you how my design might look like and you learn some `eleventy` basics that we will need in order to create this design.\n\n# My design draft\nI am a bad designer which means I have problems choosing the right colors to make it look great. But I know how my page should look like. At least I have some sort of idea that I want to try out.\n\n## The start screen\nIt should show a picture of me and some text describing me and the content that can be found at this page. Somehow it should look like this:\n\n![startscreen](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/eleventy-design/assets/Startscreen.png)\n\n\n## The overview page\nI want to divide the page into three areas:\n+ Github projects\n+ dev.to blog posts\n+ Drawings\n\nI want to make it easy for the viewer to see what every section contains. I utilize three horizontal `div` container, each containing a picture and some text, for this task.\n\n![overview](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/eleventy-design/assets/Overview.png)\n\n## The sub pages\nI want an unique look in all sections. Every section will have some kind of title, description and image.\n\n![subpage](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/eleventy-design/assets/subpage.png)\n\n# Some `eleventy` basics\nWith `eleventy` you can write your content with `markdown`. This is good if you have articles or something like that. But for a general page structure it is not enough. With `markdown` you can not place boxes next to each other and so on. So I decided to go with the template engine [`nunjucks`](https://mozilla.github.io/nunjucks/). Eleventy supports it out of the box.\n\n## Composing templates\nLet's say, you have an `base.njk` file like this:\n\n```html\n<html>\n    <body>\n        <h1>What a cool site</h1>\n        <!-- place content here -->\n    </body>\n</html>\n```\n\nAnd you want to have different views that should all be placed into this generic construct. For example this `index.njk`:\n\n```html\n<p>I am a full stack developer</p>\n```\n\nYou need two things:\n\n**At first** you create a file `_includes/base.njk` and insert the base `HTML` construct. To place content somewhere in your `nunjucks` file, you have to use `{{ content | safe }}`:\n\n```html\n<html>\n    <body>\n        <h1>What a cool site</h1>\n        {{ content | safe }}\n    </body>\n</html>\n```\n\nThe `safe` filter must be used in order to allow the insertion of `HTML`.\n\n**Then you** need to tell the `index.njk` what template it is based on. This is done by using the frontmatter of that file:\n\n```html\n---\nlayout: index\n---\n<p>I am a full stack developer</p>\n```\n\n>`Eleventy` searches for `layout` files within the directory `_includes`. But you can change this behavior using a `.eleventy.js` config file.\n\n[Check out the example!](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/private-page/eleventy-design/project)\n\n## Using variables to set page title\nOf course you want a unique page title on every page. This can be done using the frontmatter of the pages. First you insert the title tag into the `base.njk`:\n\n```html\n    <head>\n        <title>{{ pageTitle }}</title>\n    </head>\n```\n\nAnd in `index.njk` you can define the variable `pageTitle` in the frontmatter:\n\n```html\n---\nlayout: base\npageTitle: Index of my cool site\n---\n<p>I am a full stack developer</p>\n```\n\n## Data cascade\nYou can combine as much includes as you like and define variables in every include. All frontmatter data is merged. If a key appears twice, the first one wins.\n\n**Example:**\nCreate a new file `cascade.njk` with following content:\n\n```html\n<!-- project/cascade.njk -->\n\n---\nlayout: cascade\npageTitle: Index of my cool site\n---\n<p>I am a full stack developer</p>\n```\n\nAnd a file `_includes/cascade.njk` with this content:\n\n```html\n<!-- project/_includes/cascade.njk -->\n\n---\nlayout: base\npageTitle: This title is not used\n---\n{{ content | safe }}\n```\n\nEven though `_includes/cascade.njk` defines another title, the result looks like this:\n\n```html\n<!-- project/_site/cascade/index.html -->\n\n<html>\n    <head>\n        <title>Index of my cool site</title>\n    </head>\n    <body>\n        <h1>What a cool site</h1>\n        <p>I am a full stack developer</p>\n    </body>\n</html>\n```\n\nSo duplicate keys are ignored.\n\n## Including templates in nunjuck\nInheritance by using the frontmatter `layout` property is handled by `eleventy`. But you are not restricted to this mechanism. You also can include templates within `nunjuck` files: `{% include 'example.njk' %}`\n\n## Passing data to nunjuck includes\nLet's say you have this `.eleventy.js` file:\n\n```js\nmodule.exports = function(eleventyConfig) {\n  eleventyConfig.addCollection(\"many_data_entries\", () => [1,2,3,4,5,6]);\n}\n```\n\nAnd a `_include/entries.njk` file:\n```html\n<!-- project/_includes/entries.njk -->\n\n\n{% for d in entries %}\n    <p>{{ d }}</p>\n{% endfor %}\n```\n\nAnd in the root folder a new view, named `include.njk`:\n\n```html\n<!-- project/include.njk -->\n\n---\nlayout: base\npageTitle: Example of includes\n---\n{% set entries = collections.many_data_entries %}\n{% include '_includes/entries.njk' %}\n\n<p>This shows how you can include files using the nunjuck template engine and pass data to the included file</p>\n\n```\n\nThis view inherits from `base.njk` and includes another `nunjuck` template. To enable `entries.njk` to render the collection's data, you can set a new variable with this line:\n\n`{% set entries = collections.many_data_entries %}`\n\n>**Note:** Of course you must set it before you include the other template file.\n\n# Summary\nI showed you how I would design my portfolio page and what `eleventy` techniques I need to implement it. In the next article I show you how I implemented it. Stay tuned!\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. ","positive_reactions_count":15,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--5QFujuvB--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/eleventy-design/assets/header.png","tag_list":["eleventy","website","portfolio","design"],"canonical_url":"https://dev.to/gabbersepp/eleventy-basics-you-might-need-for-creating-a-generic-design-2679","reading_time_minutes":4,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":249017,"title":"New features in Cypress 3.8.3","description":"What's new in Cypress 3.8.3? I show you the relevant (at least what is relevant for me) changes.","published":true,"published_at":"2020-01-26T21:47:19.104Z","slug":"new-features-in-cypress-3-8-3-31he","path":"/gabbersepp/new-features-in-cypress-3-8-3-31he","url":"https://dev.to/gabbersepp/new-features-in-cypress-3-8-3-31he","comments_count":0,"public_reactions_count":15,"page_views_count":340,"published_timestamp":"2020-01-26T21:47:19Z","body_markdown":"---\npublished: true\ntitle: \"New features in Cypress 3.8.3\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-versions/cypress-3.8.3/assets/header.jpg\"\ndescription: \"What's new in Cypress 3.8.3? I show you the relevant (at least what is relevant for me) changes.\"\ntags: cypress, javascript, productivity, testing\nseries: Cypress Release\ncanonical_url:\n---\n\n>**Note:** In this series I show you changes that are relevant for my private projects and my projects at work. Please go to [Cypress.io](https://docs.cypress.io/guides/references/changelog.html) for a full reference.\n\nIn [Cypress 3.8.3](https://docs.cypress.io/guides/references/changelog.html#3-8-3) following changes are most valuable for my usecases:\n\n+ truncate messages from `cy.get` at 50 lines in the command log.\n+ `file` property is now available in custom reporters\n\n# Truncate at 50 lines\nImagine a selector that is very long:\n\n`.get(\"#page-content > div:nth-child(2) > div > main > section.index-hero.Hero__StyledHero-sc-15j8hrl-2.kegIwW.gatsby-image-wrapper > div > h1 > div\")`\n\nIf the `get` fails, you see this in the command log:\n\n![before](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-versions/cypress-3.8.3/assets/50-before.png)\n\nUnfortunately from this screen you will never be able to determine the full selector. This may be irrelevant in many cases but at work we have very complex and nested selectors and there it matters how the full selector looks like.\n\nNow, after upgrading to `3.8.3` you see this:\n\n![after](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-versions/cypress-3.8.3/assets/50-after.png)\n\nThis will helps us a lot with our work!\n\n# `File` property\n\nWe use Jenkins to collect test results from cypress and jest. A custom script generates a HTML report for us. Unfortunately a failed tests looks like this:\n\n![failed test without filename](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-versions/cypress-3.8.3/assets/html-before.jpg)\n\nIf you now want to check your spec file, you have to do a full text search with the spec name. This is annyoing and costs time.\n\n**Now** you can access the `file` attribute within the reporter. And after applying the change, your html report looks like this:\n\n![html report after](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-versions/cypress-3.8.3/assets/html-after.jpg)\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. ","positive_reactions_count":15,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--Rp1W8GwI--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/cypress-versions/cypress-3.8.3/assets/header.jpg","tag_list":["cypress","javascript","productivity","testing"],"canonical_url":"https://dev.to/gabbersepp/new-features-in-cypress-3-8-3-31he","reading_time_minutes":2,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":248320,"title":"Publishing my blog using HTTP upload in PHP","description":"After a hard struggle with travis and my FTP server, I decided to use a HTTP upload","published":true,"published_at":"2020-01-25T10:09:37.851Z","slug":"publishing-my-blog-using-http-upload-in-php-3aj7","path":"/gabbersepp/publishing-my-blog-using-http-upload-in-php-3aj7","url":"https://dev.to/gabbersepp/publishing-my-blog-using-http-upload-in-php-3aj7","comments_count":0,"public_reactions_count":11,"page_views_count":261,"published_timestamp":"2020-01-25T10:09:37Z","body_markdown":"---\npublished: true\ntitle: \"Publishing my blog using HTTP upload in PHP\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/travis-http-php/assets/header.jpg\"\ndescription: \"After a hard struggle with travis and my FTP server, I decided to use a HTTP upload\"\ntags: php, javascript, website, deployment\nseries: creating_private_page\ncanonical_url:\n---\n\nIn the last article I wrote about how to publish a website with `travis` and FTP. First everything seemed fine but the nightly build suddenly failed. It took long time until I realized that this was not because of my code or my `ftp server` but because of how travis has setup it's network layers. Read on here if you are interested: https://blog.travis-ci.com/2018-07-23-the-tale-of-ftp-at-travis-ci\n\nBut the fight is not lost! My webspace paket includes a PHP instance and thus I am able to write a small HTTP upload tool. A bit oversized I think but it enables me to continue using my webspace bundle.\n\n# The PHP fileupload\nShame on me, it's been a long time since I programmed PHP. So I guess the following code is written very quick and dirty.\n\nFirst I need a method for reading the `HTTP` Header to check a secret that I send along with the request.\n\n```php\n// code/upload.php#L3-L19\n\nfunction getRequestHeaders() {\n    $headers = array();\n    foreach($_SERVER as $key => $value) {\n        if (substr($key, 0, 5) <> 'HTTP_') {\n            continue;\n        }\n        $header = str_replace(' ', '-', ucwords(str_replace('_', ' ', strtolower(substr($key, 5)))));\n        $headers[$header] = $value;\n    }\n    return $headers;\n}\n\n$headers = getRequestHeaders();\n\nif ($headers['Secret'] !== \"<your secret>\") {\n\tdie(\"wrong secret\");\n}\n```\n\nThe file can be accessed with `$_FILES`. To store the image somewhere, use `move_uploaded_file`.\n\n```php\n// code/upload.php#L21-L22\n\nmove_uploaded_file($_FILES['zip-file']['tmp_name'], './'.$_FILES['zip-file']['name']);\n\n```\n\nIt is very basic but should be enough to accept files from anywhere. To speed up the upload process I moved the whole `/dist`directory into a ZIP archive. So I need to unzip it with PHP:\n\n```php\n// code/upload.php#L23-L30\n\n$zip = new ZipArchive;\nif ($zip->open('test.zip') === TRUE) {\n    $zip->extractTo('./');\n    $zip->close();\n    echo 'ok';\n} else {\n    echo 'error duringunzip';\n}\n```\n\n# Zip & send the files with NodeJS\nFor zipping the files I use [archiver](https://www.npmjs.com/package/archiver) and for making the upload request [request](https://www.npmjs.com/package/request).\n\n`archiver` is very straightforward and only needs a few lines of code:\n\n```js\n// code/zip.js\n\nvar fs = require('fs');\nvar archiver = require('archiver');\n\nvar fileName =   'test.zip'\nvar fileOutput = fs.createWriteStream(fileName);\nconst archive = archiver('zip');\n\nfileOutput.on('close', function () {\n    console.log(archive.pointer() + ' total bytes');\n    console.log('archiver has been finalized and the output file descriptor has closed.');\n});\n\narchive.pipe(fileOutput);\narchive.directory('dist/', false);\narchive.on('error', function(err){\n    throw err;\n});\narchive.finalize();\n```\n\nSending the file is also very simple and done quickly:\n\n```js\n// code/send.js\n\nconst request = require(\"request\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nvar options = {\n    url: 'https://biehler-josef.de/upload.php',\n    headers: {\n        secret: process.env.JB_UPLOAD_SECRET\n    }\n}\nvar r = request.post(options, function optionalCallback (err, httpResponse, body) {\n  console.log('Server responded with:', body, err);\n})\nvar form = r.form()\nform.append('zip-file', fs.createReadStream(path.join(__dirname, \"..\", 'test.zip')))\n```\n\n# Summary\nI replaced the FTP deployment with a HTTP upload endpoint. The `/dist` directory is zipped and unzipped with `php`. This was required because FTP upload does not work with travis very well. \n\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. ","positive_reactions_count":11,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--8HXbNsBF--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/travis-http-php/assets/header.jpg","tag_list":["php","javascript","website","deployment"],"canonical_url":"https://dev.to/gabbersepp/publishing-my-blog-using-http-upload-in-php-3aj7","reading_time_minutes":3,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":246735,"title":"Fetch tweets, download images and display them","description":"Fetch the latest tweets from twitter, store them to a local JSON file and download their images","published":true,"published_at":"2020-01-22T22:24:21.414Z","slug":"fetch-tweets-download-images-and-display-them-8ef","path":"/gabbersepp/fetch-tweets-download-images-and-display-them-8ef","url":"https://dev.to/gabbersepp/fetch-tweets-download-images-and-display-them-8ef","comments_count":0,"public_reactions_count":13,"page_views_count":4704,"published_timestamp":"2020-01-22T22:24:21Z","body_markdown":"---\npublished: true\ntitle: \"Fetch tweets, download images and display them\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/fetch-tweets/assets/header.png\"\ndescription: \"Fetch the latest tweets from twitter, store them to a local JSON file and download their images\"\ntags: website, twitter, api, blog\nseries: creating_private_page\ncanonical_url:\n---\n\nIn the last articles we created a static website with `11ty` and configured `travis-ci` to deploy the site to a FTP server. Now we will look at the `Twitter API` and investigate how we can fetch tweets and display them in our `11ty` page.\n\n# Usecase\nI already wrote about my motivation to fetch tweets here:\n\n{% post gabbersepp/creating-a-personal-page-with-twitter-sync-github-sync-dev-to-sync-2j4l %}\n\n**TL;DR**\n\nI publish my drawings on [Twitter](https://twitter.com/JosefBiehler) and I want to fetch the from there and publish them at my site. This reduces the effort to maintain that stuff.\n\n>**Example:** Please go to [biehler-josef.de](https://www.biehler-josef.de/drawing/index.html) to see this how this can look like.\n\n# My idea\nI  publish a tweet with specific hashtags. If I use them all the time, I just have to look for the tweets that contain the hashtag `drawing` (or any other hashtag). The twitter API delivers only the latest 200 tweets so we need some kind of data store for the tweets.\n\nI will do this:\n+ load all tweets from `tweets.json`\n+ get the highest id from all tweets\n+ load all latest tweets that are older than `maxId`\n+ merge the existing with the new ones\n+ save them to `tweets.json`\n+ provide all tweets to `11ty` and use them in a template\n\n**Travis integration**\n\nIn an ideal world the CI build runs every day and pushes the new tweets to the git repository. But that will be the subject of one of the following articles.\n\n# Get Access to Twitter API\n>Twitter provides a very good [documentation](https://developer.twitter.com/). So feel free to take a look into it!\n\n+ Log into the twitter developer page\n+ create an app\n![Create app](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/fetch-tweets/assets/twitter-apps.jpg)\n+ fill out the required fields\n![Mandatory fields](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/fetch-tweets/assets/twitter-fields.jpg)\n\nThen you get access tokens and secret keys. Please write them down because they are not displayed again after you close the page!\n\n![Tokens](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/fetch-tweets/assets/twitter-codes.jpg)\n\n# Fetching tweets\nI want all tweets from my own account but exclude retweets and answers. This can be done with [user_timeline](https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-user_timeline).\n\n```js\n// project/first/twitter.js#L15-L22\n\ntimeline = await client.get(\"statuses/user_timeline\", {\n    screen_name: \"JosefBiehler\",\n    exclude_replies: true,\n    include_rts: false,\n    tweet_mode: \"extended\",\n    count: 30,\n    //since_id: <id of the latest tweet stored on your disc> \n});\n```\nNote the parameter `since_id`. It is used later to retrieve only tweets that are newer than those stored in the `JSON` file.\n\nThe result does not contain a completely filled tweet. To retrieve the full text, the hashtags and all media items related to the tweet, you must use [show](https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-show-id):\n\n```js\n// project/first/twitter.js#L24-L29\n\nfor (var i = 0; i < timeline.length; i++) {\n    let tweet = timeline[i];\n    timeline[i] = await client.get(`statuses/show/${tweet.id_str}`, {\n        tweet_mode: \"extended\"\n    });\n}\n```\n\nThe relevant structure looks like this:\n\n```json\n{\n\tentities: {\n\t\thashtags: [\n\t\t\t{ text: \"\" }\n\t\t]\n\t},\n\tfull_text: \"complete text of the tweet\",\n\tcreated_at: <date of the tweet>,\n\tid_str: \"<id as string, use this instead of 'id'>\",\n\textended_entities: {\n\t\tmedia: [\n\t\t\t{\n\t\t\t\tmedia_url: \"<url to image>\"\n\t\t\t}\n\t\t]\n\t}\n}\n```\n>**Please note** the field `id_str`. During my tests I discovered that `id` differs from `id_str`. I think this is because `Javascript` can not handle such big numbers, so I use `id_str` and convert it explicit to `BigInt`.\n\n# The first test\nThe code above is sufficient for displaying the tweet, it's hashtags and it's image. But when you render more than just a few on your page, you will encounter massive performance problems. The images will load very slowly.\n\n[Try it out!](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/private-page/fetch-tweets/project/first/README.md) \n\n![first try](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/fetch-tweets/assets/tweet-list.jpg)\n\n# Performance considerations\nYou should keep your images locally. Not only because of the mentioned performance issues but also because it is not fair to use Twitter as image hosting service ;-) \n\nTo download them, I selected the npm package [request](https://www.npmjs.com/package/request). The code is very simple:\n\n```js\n// project/download/downloader.js\n\nconst request = require(\"request\");\nconst fs = require(\"fs\");\n\nfunction download(twitterUrl, id) {\n    const ext = twitterUrl.split(\"\\.\").reverse()[0];\n   \n    return new Promise(resolve => {\n        const path = `/data/${id}.${ext}`;\n        const stream = fs.createWriteStream(`.${path}`);\n        request(twitterUrl).pipe(stream);\n        stream.on(\"finish\", () => resolve(path));\n    });\n}\n\nmodule.exports = download;\n```\n\nIt takes the twitter url, downloads the content and stores the result anywhere.\n\nThe twitter code must be slightly adjusted. Also in this more complex example I load the tweets outside of the eleventy config to avoid too heavy load during eleventy startup.\n\n```js\n// project/download/twitter.js#L46-L54\n\nfor (var i = 0; i < results.length; i++) {\n    const x = results[i];\n    if (!x.mediaUrl) {\n        continue;\n    }\n    const path = await download(x.mediaUrl, x.id);\n    x.twitterMediaUrl = x.mediaUrl;\n    x.mediaUrl = path;\n}\n```\n\nAgain you can test the [full example](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/private-page/fetch-tweets/project/download/README.md).\n\nAs mentioned in the beginning, in my real portfolio project I fetch the latest tweet from the JSON file and pass the biggest tweet id as parameter `since_id` to the Twitter API. \n\n# Summary\nI showed you quickly how you can use the twitter API. Also you learned how you can download the media files from a tweet for a more performant website. And last but not least you get a clue how to use that in combination with eleventy.\n\nFeel free to try out both example projects and let me know what you think about this topic.\n\n# What is next\nUnfortunately I had to rework the publishing process. The FTP strategy does not work. Also I want to show you how I use eleventy to build a more complex design.\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":13,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--jqNhfrhe--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/fetch-tweets/assets/header.png","tag_list":["website","twitter","api","blog"],"canonical_url":"https://dev.to/gabbersepp/fetch-tweets-download-images-and-display-them-8ef","reading_time_minutes":5,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":239589,"title":"Publish static website with Travis to existing FTP server","description":"Shows you how you can utilize travis-ci.org to publish to a ftp server","published":true,"published_at":"2020-01-16T18:02:20.120Z","slug":"publish-static-website-with-travis-to-existing-ftp-server-ohi","path":"/gabbersepp/publish-static-website-with-travis-to-existing-ftp-server-ohi","url":"https://dev.to/gabbersepp/publish-static-website-with-travis-to-existing-ftp-server-ohi","comments_count":8,"public_reactions_count":10,"page_views_count":519,"published_timestamp":"2020-01-16T18:02:20Z","body_markdown":"---\npublished: true\ntitle: \"Publish static website with Travis to existing FTP server\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/travis-ftp/assets/header.png\"\ndescription: \"Shows you how you can utilize travis-ci.org to publish to a ftp server\"\ntags: eleventy, ftp, travis, website\nseries: creating_private_page\ncanonical_url:\n---\n\n>**Note**: You can checkout the runnable example at the [this blog post's repo](https://github.com/gabbersepp/dev.to-posts/blob/master/blog-posts/private-page/travis-ftp/project/README.md).\n\n>**IMPORTANT**: Unfortunately travis does not support FTP. See this article for a explanation:\n\n{% post gabbersepp/publishing-my-blog-using-http-upload-in-php-3aj7 %}\n\nIn the last article I showed you how you can create a static website using `11ty`. Now we want to publish the output somewhere. As I am paying for webspace it makes sense, that I deploy the page there by using a `ftp client`. Of course you can choose any webhoster for this.\n\n# FTP upload\nI choose [ftp-client](https://www.npmjs.com/package/ftp-client) for this task as it is very easy to use.\n\nAll HTML resides in `/dist` so we just need to take all of the directory and upload it to the root directory.\n\n```js\n// project/ftp.js\n\nconst FtpClient = require('ftp-client');\n\nasync function upload() {\n    const config = {\n        host: process.env.FTP_SERVER,\n        user: process.env.FTP_USER,\n        password: process.env.FTP_PWD,\n        port: 21,\n        secure: true\n    };\n\n    const options = {\n        logging: 'basic'\n    };\n\n    const client = new FtpClient(config, options);\n\n    client.connect(function () {\n        client.upload(['dist/**'], '/', {\n            overwrite: 'older'\n        }, function (result) {\n            console.log(result);\n        });\n    });\n  }\n\n  upload()\n\n```\n\nPlease note the usage of environment variables here. Later on I show you how to use them in travis.\n\n# Travis\nThe page should be built after each commit. As my site is open source I can use [travis](https://travis-ci.org) for free.\n\n<!-- embedme code/travis.yml -->\n```yml\nlanguage: node_js\n\ncache:\n  directories:\n    - ~/.npm\n\nnode_js:\n  - '11'\n\nscript:\n  - npm run 11ty\n  - npm run upload\n```\n\nIt is a very simple config.\n+ you define the language (`node_js`)\n+ cache `.npm` to speed up your build. Otherwise `travis` will download all dependencies in every build\n+ define the node version\n+ list all npm scripts that should be executed.\n\n\nI do not want to write about the usage of travis here. [dev.to](https://dev.to) contains a lot of posts about it. If you have question, leave a comment :thumbsup: \n\n**Run the build every day:**\n\nYou should configure a cron job to ensure that your build runs at least once per day and can fetch the latest tweets and [dev.to](https://dev.to) posts.\n\nThis must be done in the WebUI. First in your build go to the settings:\n![settings](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/travis-ftp/assets/settings.jpg)\n\nHere you can create cron jobs the way you want. My build should run every day:\n![cron job](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/travis-ftp/assets/cronjob.jpg)\n\n**Set environment variables:**\n\nThe code of my page is public so I don't want to commit my ftp user data. For this and similar tasks you can configure environment variables. Those are not visible to anyone.\n\n![env vars](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/travis-ftp/assets/env.jpg)\n\nOf course you should not display the values in your build log because this is public to everyone.\n\n# Summary\nThis was a quick introduction into travis. Of course you can upload your files every time manually to the ftp server. But this is annoying and consumes time. So I suggest you to familiarize yourself with one of the free CI server. It is definitely worth a look!\n\n# What is next?\nThe next time we will have a look at creating a design with `11ty`. It will be very basic and I only want to show you some `11ty` basics.\nAlso we must think about how we can fetch tweets.\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":10,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--ktoOniil--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/travis-ftp/assets/header.png","tag_list":["eleventy","ftp","travis","website"],"canonical_url":"https://dev.to/gabbersepp/publish-static-website-with-travis-to-existing-ftp-server-ohi","reading_time_minutes":3,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":234173,"title":"Filter Jest test results based on test result using a wrapper","description":"If you ever needed to filter Jest test results based on something that is within the result itself, then this article might help you. Also this article gives a little insight on how to write a Jest reporter.","published":true,"published_at":"2020-01-14T21:02:44.650Z","slug":"filter-jest-test-results-based-on-test-result-itself-using-a-wrapper-jb4","path":"/gabbersepp/filter-jest-test-results-based-on-test-result-itself-using-a-wrapper-jb4","url":"https://dev.to/gabbersepp/filter-jest-test-results-based-on-test-result-itself-using-a-wrapper-jb4","comments_count":0,"public_reactions_count":6,"page_views_count":3358,"published_timestamp":"2020-01-14T21:02:44Z","body_markdown":"---\npublished: true\ntitle: \"Filter Jest test results based on test result using a wrapper\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/filter-jest-results/assets/header.jpg\"\ndescription: \"If you ever needed to filter Jest test results based on something that is within the result itself, then this article might help you. Also this article gives a little insight on how to write a Jest reporter.\"\ntags: jest, testing, javascript, tutorial\nseries:\ncanonical_url:\n---\n\n>**Example files:** You'll find the example code [in the blog post's project directory](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/filter-jest-results/project/README.md)\n\nA few days ago we stumbled over a problem in our API test infrastructure that induced some brainwork to fix it. In this article I show you how you can build your own Jest reporter and also how you can wrap existing reporters to filter out specific test results.\n\n# Our use case\nWe skip tests conditional under specific circumstances.\n\nHow is this done? Well we have overwritten `describe() & it()` and if we encounter a situation where we must skip the test, we do not pass the original arguments to the original function but use this construct:\n\n```js\n  describe('Skipped', () => {\n    it(\"Skipped\", () => { return; });\n  });\n```\n\nSimilar works the replacement for `it()` that allows us to execute tests within a `describe` but skip specific ones. \n\nTo keep our reports clean we want to filter out skipped tests.\nSo we can omit all tests that are named **Skipped**.\n\n**This is our spec file:**\n\n```js\n// code/jest.spec.js\n\ndescribe(\"suite\", () => {\n  it(\"this test should appear in the html and junit report\", () => {\n    expect(true).toBe(true)\n  })\n\n  it(\"Skipped\", () => {\n    expect(true).toBe(true)\n  })\n})\n\n```\n\n**And the `jest` config:**\n\n```js\n// code/jest.config-before.js\n\nmodule.exports = {\n  reporters: [\n      \"default\",\n      \"jest-junit\",\n      [\"jest-html-reporter\", {\n        \"pageTitle\": \"Jest Test Report\"\n        }]\n  ],\n  testMatch: [\"<rootDir>/spec.js\"]\n};\n\n```\n\nWhich results in following results:\n\n**HTML**:\n\n![HTML report before filtering](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/filter-jest-results/assets/html-report-before.PNG)\n\n**JUNIT**:\n\n```xml\n<!-- code/junit-before.xml -->\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites name=\"jest tests\" tests=\"2\" failures=\"0\" time=\"9.87\">\n  <testsuite name=\"suite\" errors=\"0\" failures=\"0\" skipped=\"0\" timestamp=\"2020-01-09T19:48:00\" time=\"2.451\" tests=\"2\">\n    <testcase classname=\"suite this test should appear in the html and junit report\" name=\"suite this test should appear in the html and junit report\" time=\"0.003\">\n    </testcase>\n    <testcase classname=\"suite Skipped\" name=\"suite Skipped\" time=\"0\">\n    </testcase>\n  </testsuite>\n</testsuites>\n\n```\n\nObviously we want this output:\n\n**HTML:**\n![HTML report after filtering](https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/filter-jest-results/assets/html-report-after.PNG)\n\n**JUNIT:**\n```xml\n<!-- code/junit-after.xml -->\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites name=\"jest tests\" tests=\"1\" failures=\"0\" time=\"2.124\">\n  <testsuite name=\"suite\" errors=\"0\" failures=\"0\" skipped=\"0\" timestamp=\"2020-01-09T19:50:17\" time=\"1.272\" tests=\"1\">\n    <testcase classname=\"suite this test should appear in the html and junit report\" name=\"suite this test should appear in the html and junit report\" time=\"0.002\">\n    </testcase>\n  </testsuite>\n</testsuites>\n\n```\n\n# The idea\nI read through the \"Jest\" documentation, but found nothing related to filter logic. Changing existing reporters is out of the question  so the only solution is to pack an existing reporter into an own reporter that does not pass on all test results. Also some test measurements must be adjusted, like the amount of total tests and so on.\n\n# Writing an Jest reporter\nSo our first goal is to write an own jest reporter. It's basic structure is very simple as you can see:\n\n```js\n// code/jest-reporter-empty.js\n\nclass ReporterWrapper {\n  constructor(globalConfig, options) {\n  }\n\n  onRunStart(runResults, runConfig) {\n  }\n\n  onTestResult(testRunConfig, testResults, runResults) {\n  }\n\n  onRunComplete(test, runResults) {\n  }\n}\n\nmodule.exports = ReporterWrapper;\n\n```\n\nWriting a reporter is simple. You just do anything you want within those methods, save the file anywhere and then reference your reporter in the `jest.config.js` among the other reporters:\n\n```js\n// code/jest.config-own-reporter.js\n\nmodule.exports = {\n  reporters: [\n      \"default\",\n      \"jest-junit\",\n      \"jest-html-reporter\",\n      \"relative/path/to/jest-report-wrapper.js\"\n  ],\n  testMatch: [\"<rootDir>/specs/*.js\"]\n};\n\n```\n\n:exclamation: **Attention**:\n`Jest` passes the same instance of test results through all reporters. And it seems that the list of reporters is worked off beginning with the first. So **changes** made to the results in the first reporter are **visible in the subsequent reporters**, too.\n\n# The structure of the test results\n> **_NOTE:_** \nI don't want to go to deep into the meaning of the arguments because there are many good resources in the web. Please see the [Additional Resources](#additional-resources) section for further information.\n\n`testResults` contains the result of the last executed spec file. `runResults` contains all results from within one execution. The structure (only the relevant parts) of the `testResults` looks like this:\n\n<!-- embedme code/testResults.json -->\n```json\n{\n  \"numPassingTests\": 5,\n  \"testFilePath\": \"path/to/spec.js\",\n  \"testResults\": [\n    {\n      \"ancestorTitles\": [\n        \"SelectField Component\"\n      ],\n      \"title\": \"renders text input correctly\"\n    }\n  ]\n}\n\n```\n`ancestorTitles` contains a list of parent names. They come from `descibe()` and nested `describe()`. \n\nAnd the `runResults`'s structure looks like this:\n\n<!-- embedme code/runResults.json -->\n```json\n{\n  \"numPassedTestSuites\": 15,\n  \"numTotalTestSuites\": 15,\n  \"numPassedTests\": 46,\n  \"numTotalTests\": 46,\n  \"testResults\": [\n    \"here are testResults\"\n  ]\n}\n\n```\n\n# Cleaning the test results\nWhen a reporter callback is hit, we only had to check the `title` and the list of `ancestorTitles` if the word **Skipped** is found. If yes, the testresult is removed and the result counts are decreased by one.\n\nAfter all tests run, the callback `onRunComplete` is hit and we must adjust the total testcounts.\n\nLet's go!\n\n## The options\nOf course we have to tell the wrapper what kind of underlying reporter exist and also which options those reporter need.\n\nAs every reporter receives the same testresult instance, it makes sense to configure the wrapper once and pass all existing reporter into it. I just left the `default` reporter untouched because I didn't want to mess around with Jest's internals.\n\n```js\n// project/jest.config.js\n\nmodule.exports = {\n  reporters: [\n    \"default\",\n    [\"jest-report-wrapper.js\",\n      [\n        { underlying: \"jest-junit\" },\n        {\n          underlying: \"jest-html-reporter\",\n          underlyingOptions: {\n            \"pageTitle\": \"Jest Test Report\"\n          }\n        }\n      ]\n    ]\n  ],\n  testMatch: [\"<rootDir>/spec.js\"]\n};\n\n```\n\n## The constructor\nFirst we need to do some initializing stuff.\n\n```js\n// project/jest-report-wrapper.js#L2-L2\n\nconstructor(globalConfig, options) {\n```\n\n`options` contains exactly the options from the reporter config. So it looks like this:\n\n```js\n// project/jest.config.js#L5-L13\n\n[\n  { underlying: \"jest-junit\" },\n  {\n    underlying: \"jest-html-reporter\",\n    underlyingOptions: {\n      \"pageTitle\": \"Jest Test Report\"\n    }\n  }\n]\n```\n\nWhat we have to do is real obvious:\n+ load the module whose path is in `underlying`\n+ create `new` instance and pass the reporter's options\n\n```js\n// project/jest-report-wrapper.js#L2-L11\n\nconstructor(globalConfig, options) {\n  this._globalConfig = globalConfig;\n  this._options = options;\n  this.underlyingReporters = [];\n\n  this.underlyingReporters = underlyingReporter.map(r => {\n    const resolved = require(r.underlying);\n    return new resolved(globalConfig, r.underlyingOptions);\n  })\n}\n```\n\n## onStart callback\nWe are not interested in this callback as it has no real meaning, so we pass on all arguments without modifications.\n\n```js\n// project/jest-report-wrapper.js#L13-L19\n\nonRunStart(runResults, runConfig) {\n  this.underlyingReporters.forEach(r => {\n    if (r.onRunStart) {\n      r.onRunStart(runResults, runConfig)\n    }\n  })\n}\n```\n\n## onTestResult callback\n\nWe start by searching single tests that match the criteria. If one is found, it is removed. \n`testResults` consists of several single tests. So we must check every single one if it's name is **Skipped** or if one of it's parent names is **Skipped**. `removed` represents the amount of removed results and is used to adjust the testresult counts.\n\n```js\n// project/jest-report-wrapper.js#L21-L32\n\nonTestResult(testRunConfig, testResults, runResults) {\n  const removed = this.processSpecFile(testResults);\n  testResults.numPassingTests -= removed;\n  runResults.numPassedTests -= removed;\n  runResults.numTotalTests -= removed;\n\n  this.underlyingReporters.forEach(r => {\n    if (r.onTestResult) {\n      r.onTestResult(testRunConfig, testResults, runResults)\n    }\n  })\n}\n```\n\n```js\n// project/jest-report-wrapper.js#L52-L66\n\nprocessSpecFile(specFile) {\n  let removed = 0;\n  for (let testIndex = 0; testIndex < specFile.testResults.length; testIndex++) {\n    const test = specFile.testResults[testIndex];\n    if (test.ancestorTitles.indexOf(\"Skipped\") > -1 || test.title === \"Skipped\") {\n      // test was skipped thus remove it\n      specFile.testResults.splice(testIndex, 1);\n      removed++;\n      // adjust indexCount because 'specFile.testResults.length' has been updated due to the 'splice'\n      testIndex--;\n    }\n  }\n\n  return removed;\n}\n```\n\n## onRunComplete callback\n\nAfter all tests have been executed, this callback is called. We should remove the testsuites, that are empty, from the `runResults` to keep the results clean and also to avoid unwanted behaviour in the reporter. If an empty testsuite is found, it is removed and the total result counts are adjusted.\n\n```js\n// project/jest-report-wrapper.js#L34-L50\n\nonRunComplete(test, runResults) {\n  for (let i = 0; i < runResults.testResults.length; i++) {\n    let tr = runResults.testResults[i];\n    if (tr.testResults.length == 0) {\n      runResults.testResults.splice(i, 1);\n      i--;\n      runResults.numPassedTestSuites -= 1;\n      runResults.numTotalTestSuites -= 1;\n    }\n  }\n\n  this.underlyingReporters.forEach(r => {\n    if (r.onRunComplete) {\n      r.onRunComplete(test, runResults)\n    }\n  })\n}\n```\n\n# Summary\nYou learned how you can write an own `jest` reporter and how you can modify the test results to control the html/junit/... output.\n\nIs there a native functionality in `jest` for doing this kind of stuff? Let me know! \n\n\n# Additional Resources <a name=\"additional-resources\">\n+ [A very good explanation of the `Jest` reporter interface](https://medium.com/@colinwren/writing-a-jest-test-reporter-cb7c123ec211)\n+ [Empty `Jest` reporter template](https://github.com/colinfwren/jest-reporter-debug/blob/master/src/index.js)\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":6,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--Wh7gqwdD--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/filter-jest-results/assets/header.jpg","tag_list":["jest","testing","javascript","tutorial"],"canonical_url":"https://dev.to/gabbersepp/filter-jest-test-results-based-on-test-result-itself-using-a-wrapper-jb4","reading_time_minutes":6,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":234172,"title":"Use eleventy to create my static page","description":"Write your website with markdown + liquid and publish it as static page. This article shows how I create my page with eleventy","published":true,"published_at":"2020-01-10T18:58:46.926Z","slug":"use-eleventy-to-create-my-static-page-50n","path":"/gabbersepp/use-eleventy-to-create-my-static-page-50n","url":"https://dev.to/gabbersepp/use-eleventy-to-create-my-static-page-50n","comments_count":3,"public_reactions_count":20,"page_views_count":1271,"published_timestamp":"2020-01-10T18:58:46Z","body_markdown":"---\npublished: true\ntitle: \"Use eleventy to create my static page\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/eleventy-static-page/assets/header.png\"\ndescription: \"Write your website with markdown + liquid and publish it as static page. This article shows how I create my page with eleventy\"\ntags: tutorial, eleventy, html, website\nseries: creating_private_page\ncanonical_url:\n---\n\n>**Example files:** You'll find the example code [in the blog post's project directory](https://github.com/gabbersepp/dev.to-posts/tree/master/blog-posts/private-page/eleventy-static-page/project/README.md)\n\nThis is the second part of this series. In the first I talked about my motivations to revive my old website (link will be added in the next days). Now we need to build the first milestone and this is definitely the HTML that everyone can view in the browser. \nI thought a lot about how to do this. For those that just began to code the last one to ten years, I can tell you that today you have the best time ever. Back then there were only a few tutorials, nearly nothing complex with **javascript**, **PHP** was very popular and so were PHP based CMS systems.\nNowadays this has changed completely. You have plenty of possibilities to build a website. You can choose whatever JS framework you want. You can host your page, whether you use NodeJS or C# or ... , with very low cost or even for free if you publish your project der an open source license.\n\n# Choosing the right thing\nAmong all those possibilities it is very hard to decide how I should create my website. I already have [one](https://jodekadev.de) that is written with React but completely manually. This is sufficient because that content does not change very often. But I plan to updated the content of the new page every day or at least once per week. \nBy chance I discovered [11ty](https://11ty.dev) a few days ago. It is a static site builder that works with zero config. I hate tools I have to configure very long. In the best case I install it and it works. And yes, **11ty** fulfills exactly my expectation!\n\nThis are the steps to use `eleventy`:\n+ install it: `npm install -D @11ty/eleventy`\n+ create a npm script: \n```\n\"scripts\": {\n    \"11ty\": \"eleventy\"\n  }\n```\n+ create a `.md` file\n+ call `npm run 11ty`\n\nAnd after that you will find a directory named `_site` that contains the **HTML** code.\n\n> **_NOTE:_** You also can start a watch task to enable `11ty` to automatically observe your `.md` files. See the sample project files for this blog post.\n\n# Display tweets in the page\nLet's say we have a file `tweets.json` that contains a list of tweets and we want to display them. How can we do this? **Eleventy** sends the markdown files through the [liquid template engine](https://shopify.github.io/liquid/) so we can use everything we can do in liquid. That means we have control structures and iteration structures as well.\n\nSo something like this will do the trick:\n```\n{% for tweet in tweets %}\n  id: {{ tweet.id }}\n{% endfor %}\n```\n# Publish a new dynamic collection to liquid\nIn order to access `tweets` we must read the file and tell someone that we have a new list of objects.\n\nThe reading part is easy:\n```js\n    const tweetsStr = fs.readFileSync(\"../preprocessing/twitter/tweets.json\").toString();\n    const tweets = JSON.parse(tweetsStr);\n```\n\nEleventy offers a special method that allows you to add new collections. To use this you must create a file named `.eleventy.js` in the project root (it is a config file) that exports a function whose only parameter is a `eleventyConfig` object.\nOn that object you can call `addCollection('tweets', tweets)`. Now you can access it:\n\n```\n{% for t in collections.tweets %}\n    {{ t.id }}\n{% endfor %}\n```\n\nNote the **collections** keyword here which is necessary.\n\nFull code of `.eleventy.js`:\n\n```js\n// project/.eleventy.js\n\nconst fs = require(\"fs\");\n\nmodule.exports = function(eleventyConfig) {\n  const tweetsStr = fs.readFileSync(\"./tweets.json\").toString();\n  const tweets = JSON.parse(tweetsStr);\n  console.log(tweetsStr)\n  eleventyConfig.addCollection(\"tweets\", () => tweets);\n\n  return {\n    dir: {\n      input: \"views\",\n      output: \"dist\"\n    }\n  }\n}\n\n```\n\n# Summary\nYou have learned how easy `Eleventy` can be setup and how you can utilize Liquid to display a dynamic list. \n\n# What's next\nNow as we have HTML code, I have to publish it somewhere. In the next article I'll show you how everything can be deployed to a webspace using `travis` and a FTP server. Hopefully this works, otherwise I must choose another strategy :sweat_smile:\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":20,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--qhKK4ylm--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/eleventy-static-page/assets/header.png","tag_list":["tutorial","eleventy","html","website"],"canonical_url":"https://dev.to/gabbersepp/use-eleventy-to-create-my-static-page-50n","reading_time_minutes":3,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}},{"type_of":"article","id":233542,"title":"Creating a personal page with Twitter sync, github sync, dev.to sync","description":"Learn how I build my personal page using eleventy, twitter, github and other cool stuff","published":true,"published_at":"2020-01-07T18:03:43.100Z","slug":"creating-a-personal-page-with-twitter-sync-github-sync-dev-to-sync-2j4l","path":"/gabbersepp/creating-a-personal-page-with-twitter-sync-github-sync-dev-to-sync-2j4l","url":"https://dev.to/gabbersepp/creating-a-personal-page-with-twitter-sync-github-sync-dev-to-sync-2j4l","comments_count":0,"public_reactions_count":30,"page_views_count":562,"published_timestamp":"2020-01-07T18:03:43Z","body_markdown":"---\npublished: true\ntitle: \"Creating a personal page with Twitter sync, github sync, dev.to sync\"\ncover_image: \"https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/creating-private-page/assets/header.png\"\ndescription: \"Learn how I build my personal page using eleventy, twitter, github and other cool stuff\"\ntags: tutorial, eleventy, twitter, github\nseries: creating_private_page\ncanonical_url:\n---\n\nLong time ago I had a personal page that provides tutorials about many programming stuff. E.g. I showed how an operating system can be built using Assembler. Or how the Win32 API can be used with ASM. Also some Delphi stuff was there and so on.\n\nMy page was very popular within a specific target group. I had good SEO ranks and all that stuff. But at some point in time I lost interest in writing tutorials. And also I had no time left because other (non programming related) projects became more important. \n\nNow in 2020 things have **changed**. I finished university in 2016, made a **huge progress** at work the last year. I started **contributing** to open source projects and built a few projects on **Github**. **Drawing** is my new hobby since 2019 and I think that this will be something I will do **for years**. I started using **Twitter and Instagram** more professional to promote my drawings and coding stuff and finally at the end of 2019 I came across **dev.to** and started to **write tutorials again**. I think I am now at a point where it makes sense to **combine all those activities** into one **central website** so I can provide it to those who are interested in (and of course, maybe employers are).\n\n# What my personal page can and what it cannot do\nYes I am one of those poor people who must handle GDPR because I am from Germany. Also we have very strict laws. That are the main reasons for the following points:\n+ **No comments**\n\n\n    A comment functionality would require a kind of an login. This would involve cookies and all that stuff and thus would force me to be GDPR compliant. To be honest, I can do so much more in the time that would be needed to fully understand the GDPR. And yes, there are many different interpretations and opinions. I don't think that a person like me and you can implement the GDPR 100% correct without asking a lawyer.\n+ **But I want comments!**\n\n    Of course people should be able to comment. A tutorial without interaction is senseless. So I will publish my blog posts regarding programming stuff here at dev.to and then link them at my website. No cookies, no accounts but fully functional!\n+ **No advertisement**\n\n    In former times I experimented with different types of ads. But in the end this does not generate that much money. Also I would have to register a small business at my local government which would make my income tax return much more complicate. So there will be no ads at all.\n+ **Publish my drawings I post on Twitter**\n\n    Today I have to publish my drawings at two social media sites: Twitter and Instagram. Why should I publish them manually to a third platform? That does not make sense. So I want to fetch them from twitter and publish them.\n+ **Easy to create and modify**\n\n    I like markdown syntax. It has something minimalist. Thus that is how I want to write my page.\n+ **Git**\n\n    I like the idea of cool stuff beeing open source. And open source projects gain from a lot of benefits, e.g. free [Travis builds](https://travis-ci.org) and free hosting. Using git also gives me version history for free.\n+ **Project showcase**\n\n    I have a few projects on github.com. Not very spectacular but at least they are my projects and I want them to be shared among the rest of the world. But of course I do not want to duplicate a project's description to my personal page.\n \n# What you can expect from this blog post series\n\nI want to show you how I create my page. This means, I show you:\n+ **how to manage dev.to blog posts using git**\n\n    well this one is easy. I followed the guide here:\n    {% post maxime1992/manage-your-dev-to-blog-posts-from-a-git-repo-and-use-continuous-deployment-to-auto-publish-update-them-143j %}\n\n+ **fetch tweets and publish them**\n\n    This aims to my drawings. I want to avoid duplicate effort after finishing my work. But it is not restricted to my drawings. It should be generic so I easily can add new topics I want to aggregate on my page. Also those tweets should be fetched by a CI server and then pushed into the page's github repository. If this is not possible, I need another trick to not query the tweets on every pageload.\n\n+ **present specific projects from github**\n\n    My first thought about this topic could be the best maybe. I will add a special markdown file in each project I want to display at my page. If it works, I can show you how this is done.\n\n# The end\nThis was the first part. Hopefully a few will follow. Stay tuned!\n\n# Additional Resources\nIf you are interested in my old Assembler work you can access everything on github.com. A few month ago I have opensourced all. But be aware: I was young and no professional coder and many stuff is commented in german.\n\n{% github gabbersepp/assembler %}\n\n\n----\n\n# Found a typo?\nAs I am not a native English speaker, it is very likely that you will find an error. In this case, feel free to create a pull request here: https://github.com/gabbersepp/dev.to-posts . Also please open a PR for all other kind of errors.\n\nDo not worry about merge conflicts. I will resolve them on my own. \n","positive_reactions_count":30,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--53lN4R7c--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://raw.githubusercontent.com/gabbersepp/dev.to-posts/master/blog-posts/private-page/creating-private-page/assets/header.png","tag_list":["tutorial","eleventy","twitter","github"],"canonical_url":"https://dev.to/gabbersepp/creating-a-personal-page-with-twitter-sync-github-sync-dev-to-sync-2j4l","reading_time_minutes":4,"user":{"name":"Josef Biehler","username":"gabbersepp","twitter_username":"JosefBiehler","github_username":"gabbersepp","user_id":306925,"website_url":"https://biehler-josef.de","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EZqhp43y--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DRXduzlT--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/306925/5f03887d-deac-4f7c-97c0-1717cf8de8d6.jpeg"}}]